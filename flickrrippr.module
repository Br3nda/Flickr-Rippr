<?php
include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');

/**
 * Implementation of hook_perm().
 */
function flickrrippr_perm() {
  return array('Configure own blogged flickr stream', 'Administer global flickr api settings', /* 'Cache own Flickr Photos on this server'*/);
}

/**
 * Implementation of hook_menu().
 */
function flickrrippr_menu() {
  GLOBAL $user;
  $items = array();
  $items['admin/content/flickrrippr'] = array(
    'title' => t('Flickr Rippr'),
    'description' => t('View users, and force re-read from flickr.com'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'flickrrippr_admin',
    'access arguments' => array('Administer global flickr api settings'),
    'file' => 'flickrrippr.admin.inc',
  );

  $items['admin/content/flickrrippr/fetch'] = array(
    'title' => t('Fetch'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_fetch',
    'page arguments' => array(4),
    'access arguments' => array('Administer global flickr api settings'),
    'file' => 'flickrrippr.admin.inc',
  );

  $items['admin/content/flickrrippr/edit'] = array(
    'title' => t('Edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_edit',
    'page argument' => array(4, 5),
    'access arguments' => array('Administer global flickr api settings'),
    'file' => 'flickrrippr.admin.inc',
  );

  //configure a user's account with their flickr username
  $items['user/%/flickrrippr'] = array(
    'title' => t('Flickr Rippr'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'flickrrippr_user_settings',
    'access arguments' => array('Configure own blogged flickr stream'),
  );
  $items['user/%/flickrrippr/add'] = array(
    'title' => t('add'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_add_account',
    'page arguments' => array(1),
    'access arguments' => array('Configure own blogged flickr stream'),
  );
  $items['user/%/flickrrippr/edit/%'] = array(
    'title' => t('edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_edit_account',
    'page arguments' => array(1, 4),
    'access arguments' => array('Configure own blogged flickr stream'),
  );

  $items['node/%/flickrrefresh'] = array(
    'title' => 'Re-fetch from Flickr',
    'page callback' => 'flickrrippr_node_refresh',
    'page arguments' => array(1),
    'access callback' => 'flickrrippr_node_refresh_perm',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );


  $items['admin/settings/flickrrippr'] = array(
    'title' => t('Flickr Rippr Settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('Administer global flickr api settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickrrippr_admin_settings_form'),
    'file' => 'flickrrippr.admin.inc',
  );

//   $items['admin/settings/flickrapi']['description'] .= ' '. t('Also Flickr Rippr settings');
  return $items;
}


function flickrrippr_node_refresh_perm($nid) {
  $node = node_load(array('nid' => $nid));
  if ($node->type != 'flickrrippr_photo') {
    return FALSE;
  }

  return node_access('update', $nid);
}

/** 
 * For editing one account
 */
function flickrrippr_user_edit_account($uid, $flickrid) {
  $fuser = flickrrippr_get_flickr_user($uid, $flickrid);
  $output = drupal_get_form('flickrrippr_user_settings_form', $fuser);
  return $output;
}

/** 
 * Add a new account
 */
function flickrrippr_user_add_account($uid) {
  $flickruser->uid = $uid;
  $output = drupal_get_form('flickrrippr_user_settings_form', $flickruser);
  return $output;
}


/**
 * Get the details of a flickr user from the database
 */
function flickrrippr_get_flickr_user($uid, $flickrid) {
  return db_fetch_object(db_query("SELECT * FROM {flickrusers} WHERE uid=%d AND flickrid='%s'", $uid, $flickrid));
}

/**
 * Loading of the node
 */
function flickrrippr_load(&$node) {
  $node->flickr_photo = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d", $node->nid));
}

/**
 * Re-fetch a photo from flickr
 */
function flickrrippr_node_refresh($nid) {
  $node = node_load(array('nid' => $nid));
  $photo_id = $node->flickr_photo->flickrphoto_id;

  if (!$photo_id) {
    drupal_set_message(t('Photo not found. This should never happen'), 'error');
  }
  else {
    flickrrippr_makenode($photo_id);
  }
  drupal_set_message("Flickr photo manually re-fetched from flickr.com");

 drupal_goto('node/' . $nid);
}




/**
 * Called by cron, this check for new photos for each user
 * This function will recurse, reading futher back into the flickr stream
 * until it finds a photo it already has saved as a node
 */
function flickrrippr_check_latest_for_user($user_id, $pagenum = 1) {
 //fetches defails from our database
  $flickrusers =  flickrrippr_get_flickr_accounts($user_id);

  foreach($flickrusers as $fu) {
    flickrrippr_fetch_latest($fu);
  }
  return '';

}

/**
 * Get the latest from flickr.com for one user
 */
function flickrrippr_fetch_latest($flickruser, $pagenum=0) {

  $num_photos = variable_get('flickrrippr_num_per_fetch', 10);
  
 //search flickr for latest photos from that user.
  $flickr = flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"), 'error');
    return $output;
  }
  
  $query = array(
    'user_id' => $flickruser->flickrid,
    'per_page' => $num_photos,
    'page' =>  $pagenum
  );

  if ($flickruser->tag) {
    $query['tags'] = check_plain($flickruser->tag);
  }

  $photos = $flickr->photos_search($query);
  $num_photos = 0;
  if (is_array($photos['photo'])) {
    foreach ($photos['photo'] as $p) {
      flickrrippr_makenode($p['id']);
      $num_photos++;
    }
  }

  drupal_set_message(t('!count Photos saved or updated', array('!count' => $num_photos)));

  //if we found a photo that wasn't new, then don't recurse
  if (!$new) {
    return FALSE;
  }
  return true;
}

/**
 * Helper function, returns the flickr_id for a flickr username.
 */
function flickrrippr_flickruser($username) {
  $flickr = @flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"), 'error');
    return $output;
  }
  $fuser = $flickr->people_findByUsername($username);

  if (!$fuser['id']) {
    drupal_set_message(t('!username is not known by flickr.com', array('!username' => $username)), 'error');
    return;
  }
  db_query("UPDATE {flickrusers} SET flickrid='%s' WHERE flickrusername='%s'", $fuser['id'], $username);
  return $fuser['id'];
}

/**
 * Implementation of hook_cron().
 */
function flickrrippr_cron() {
  //get missing flickrids
  flickrrippr_add_missing_flickrids();

  $result = db_query("SELECT * FROM {flickrusers} ORDER BY uid");

  while ($fuser = db_fetch_object($result)) {
    flickrrippr_check_latest_for_user($fuser->uid);
  }
}


function flickrrippr_add_missing_flickrids() {
  $result = db_query("SELECT * FROM {flickrusers} WHERE flickrid = '' OR flickrid IS NULL LIMIT 100");
  while($fu = db_fetch_object($result)) {
    drupal_set_message(t("Fetching nsid for %username", array('%username' => $fu->flickrusername)));
    $flickr = flickrapi_phpFlickr();
    if (!$flickr) {
      drupal_set_message(t("Unable to query flickr.com, library missing"), 'error');
      return;
    }
    $result = $flickr->people_findByUsername($fu->flickrusername);
    $id = $result['id'];
    drupal_set_message($id);
    db_query("UPDATE {flickrusers} SET flickrid='%s' WHERE uid=%d AND flickrusername='%s'", $id, $fu->uid, $fu->flickrusername); 
  }
}


/**
 * Where a user defines their username
 */
function flickrrippr_user_settings($uid = NULL) {
  $output = '';
  if (!empty($uid) && user_access('Administer global flickr api settings')) {
    $user = user_load(array('uid' => $uid));
  }
  else {
    GLOBAL $user;
  }
  $output .= l(t('Add new account'), 'user/'. $user->uid . '/flickrrippr/add');

  $accounts = flickrrippr_get_flickr_accounts($user->uid);
  $headers = array(t('Flickr ID'), t('Flickr username'), t('Tag'));
  foreach($accounts as $a) {
    $rows[] = array(
      $a->flickrid,
      $a->flickrusername,
      $a->tag,
      drupal_get_form('flickrrippr_user_fetch_now', $user->uid, $a->flickrid),
      l(t('Edit'), 'user/'. $user->uid .'/flickrrippr/edit/'. $a->flickrid),
    );
    
  }
  $output .= theme('table', $headers, $rows);
  return $output;

}

function flickrrippr_user_fetch_now($v, $uid, $flickrid, $dest='') {
  $form = array();
  $form['flickrid'] = array('#type' => 'hidden', '#value' => $flickrid);
  $form['uid'] = array('#type' => 'hidden', '#value' => $uid);
  $form['dest'] = array('#type' => 'hidden', '#value' => $dest);
  $form['fetch'] = array('#type' => 'submit', '#value' => t('Fetch now'));
  return $form;
}


/**
 * Manually fetch all the latest for a user
 */
function flickrrippr_user_fetch_now_submit($form_id, $fv) {
//   $flickrid = $fv['values']['flickrid'];
  $flickrid = $_POST['flickrid'];
  $uid = $_POST['uid'];
  $dest = $_POST['dest'];
  if(!$dest) $dest = 'user/'. $uid .'/flickrrippr';
  //get user
  $fuser = flickrrippr_get_flickr_user($uid, $flickrid);
  if (!$fuser) {
    drupal_set_message(t('Flickr user (uid=%uid, flickrid=%flickrid) not found in our database', array('%uid' => $uid, '%flickrid' => $flickrid)), 'error');
    return;
  }
  drupal_set_message(t("Fetching latest for %flickrid", array("%flickrid" => $flickrid)));
  //and fetch
  flickrrippr_fetch_latest($fuser);

  drupal_goto(check_plain($dest));
}

/**
 * Form for a user editing their own settings
 */
function flickrrippr_user_settings_form($a, $flickruser) {
  
  $form = array();
  drupal_set_title(t('Flickr Rippr settings for %username', array('%username' => $flickruser->flickrusername)));
  $form['flickrid'] = array('#type' => 'hidden', '#value' => $flickruser->flickrid);
  $form['uid'] = array('#type' => 'hidden', '#value' => $flickruser->uid);

  if (!$flickruser->flickrid) {
    $form['flickr_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Flickr Username'),
      '#default_value' => isset($flickruser->flickrusername) ? $flickruser->flickrusername : '',
      '#required' => TRUE
    );
  }

  $form['flickr_tag'] = array(
      '#type' => 'textfield',
      '#title' => t('Filter by Tag'),
      '#description' => t('If entered, only photos that have this tag will be imported. Be aware that your friends and family on flickr may also be allowed to tag your photos.'),
      '#default_value' => isset($flickruser->tag) ? $flickruser->tag : '',
    );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );
  return $form;
}

/**
 * Get a user's flickr settings from our database
 */
function flickrrippr_get_flickr_accounts($uid) {
  $result = db_query("SELECT * FROM {flickrusers} WHERE uid = %d ORDER BY lower(flickrusername)", $uid);
  while ($fuser = db_fetch_object($result)) {
    $flickr_users[] = $fuser;
  }
  return $flickr_users;
  
}


function flickrrippr_user_settings_form_validate($form, &$form_state) {
  //TODO, check the submitted username exists on flickr?
  //query api
  //and store the 3432@N00 uid then
}
/**
 * Save submission of a user editting their own settings
 */
function flickrrippr_user_settings_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['uid'])) {
    $user = user_load(array('uid' => intval($form_state['values']['uid'])));
  }
  else {
    GLOBAL $user;
  }

  //TODO fix call to flickrrippr_get_flickr_accounts
  $flickr_account = flickrrippr_get_flickr_user($form_state['values']['uid'], $form_state['values']['flickrid']);

  if (isset($flickr_account->flickrusername)) {
    $result = db_query("UPDATE {flickrusers} SET tag='%s' WHERE uid = %d AND flickrid='%s'",
      $form_state['values']['flickr_tag'],
      $user->uid,
      $form_state['values']['flickrid']);
    drupal_set_message(t("Flickr account updated"));
  }
  else {
    $result = db_query("INSERT INTO {flickrusers} (flickrusername, flickrid, tag, uid) VALUES ('%s', '%s', '%s', %d)",
      $form_state['values']['flickr_username'],
      $flickrid,
      $form_state['values']['flickr_tag'],
      $user->uid);
    drupal_set_message(t("Flickr username set"));
  }
  drupal_goto('user/'. $user->uid .'/flickrrippr');
}

/**
 * Used when attempting to edit a flickrphoto node.
 */
function flickrrippr_form(&$node) {
  $form = array();
  //TODO add instructions on edit the photo on flickr.com

  return $form;
}

function flickrrippr_node_info() {
  return array(
    'flickrrippr_photo' => array(
      'name' => t('Flickr Rippr Photo'),
      'module' => 'flickrrippr',
      'description' => t("Photos imported from a user's flickr stream"),
      'has_body' => FALSE,
      )
    );

}

/**
 * Instead of displaying a damaged node, display a form for deleting it
 */
function flickrrippr_failed_form($form, $node) {
  $form = array();
  $form['message'] = array(
    '#type' => 'markup',
    '#value' => t('Photo no longer available on flickr.com, do you want to delete?') . ' ',
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Yes, Delete from this website'),
  );
  return $form;
}

function flickrrippr_failed_form_submit($form, $fv) {
  $nid = $fv['values']['nid'];
  node_delete($nid);
//   drupal_set_message(t('Flickr photo delete from this website'));
  drupal_goto('<front>');
  
}

function flickrrippr_view(&$node, $teaser = FALSE, $page = FALSE) {
  
  $photo = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d LIMIT 1", $node->nid));

  if (!$photo || $photo->failed == 1) {
    if (node_access('delete', $node)) {
      drupal_set_message(t("Failed to find flickr photo info for !link", array('!link' => l($node->title, 'node/'. $node->nid))), 'error');
      $node->content['delete'] = array(
        '#value' => drupal_get_form('flickrrippr_failed_form', $node),
        '#weight' => -10,
      );
    }
//     return $node;
  }

  if ($page) {
    $image = l(theme('image', $photo->photo_path, $teaser, $teaser, NULL, FALSE), $photo->page_url, array('html' => TRUE));
  }
  else {
    $image = l(theme('image', $photo->thumbnail_path, $teaser, $teaser, NULL, FALSE), 'node/'. $node->nid, array('html' => TRUE));
  }

  $node->content['flickr_photo'] = array(
    '#weight' => 0,
   '#value' => '<div class="flickrrippr_photo">'. $image .'</div>',
  );


  $markup_trust = variable_get('flickrrippr_markup_trust', FALSE);

  $node->content['flickr_description'] = array(
    '#value' => '<div class="flickrrippr_description">'. ($markup_trust ? $photo->description : check_plain($photo->description))  .'</div>', //decode then encode
    '#weight' => 5
  );
  
  $node->content['body'] = array();
  
  return $node;
}


function flickrrippr_node_form(&$form_state, $node) {
}

/**
 * 
 */
function flickrrippr_nodeapi(&$node, $op, $teaser, $page) {
  if (!preg_match('!^flickrrippr_!', $node->type)) {
    return;
  }
  
  switch ($op) {
    case 'delete':
      //delete where there is no node.. THIS WON'T SCALE
      //how to get around drupal's lack of referential integrity?
      db_query('DELETE FROM {flickrphotos} WHERE nid NOT IN (SELECT nid FROM {node});');
      drupal_set_message("Flickr photo deleted");
    break;
    case 'view':
      flickrrippr_view($node, $teaser, $page);
    break;
  }
}

