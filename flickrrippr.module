<?php
include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');

/**
 * Implementation of hook_perm().
 */
function flickrrippr_perm() {
  return array('Configure own blogged flickr stream', 'Administer global flickr api settings', /* 'Cache own Flickr Photos on this server'*/);
}

/**
 * Implementation of hook_menu().
 */
function flickrrippr_menu() {
  GLOBAL $user;
  $items = array();
  $items['admin/content/flickrrippr'] = array(
    'title' => t('Flickr Rippr'),
    'description' => t('View users, and force re-read from flickr.com'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'flickrrippr_admin',
    'access arguments' => array('Administer global flickr api settings'),
  );

  $items['admin/content/flickrrippr/fetch'] = array(
    'title' => t('Fetch'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_fetch',
    'page arguments' => array(4),
    'access arguments' => array('Administer global flickr api settings'),
  );

  $items['admin/content/flickrrippr/edit'] = array(
    'title' => t('Edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_edit',
    'page argument' => array(4, 5),
    'access arguments' => array('Administer global flickr api settings'),
  );

  //configure a user's account with their flickr username
  $items['user/%/flickrrippr'] = array(
    'title' => t('Flickr Rippr'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'flickrrippr_user_settings',
    'access arguments' => array('Configure own blogged flickr stream'),
  );
  $items['user/%/flickrrippr/add'] = array(
    'title' => t('add'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_add_account',
    'page arguments' => array(1),
    'access arguments' => array('Configure own blogged flickr stream'),
  );
  $items['user/%/flickrrippr/edit/%'] = array(
    'title' => t('edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_edit_account',
    'page arguments' => array(1, 4),
    'access arguments' => array('Configure own blogged flickr stream'),
  );

  $items['node/%/flickrrefresh'] = array(
    'title' => 'Re-fetch from Flickr',
    'page callback' => 'flickrrippr_node_refresh',
    'page arguments' => array(1),
    'access callback' => 'flickrrippr_node_refresh_perm',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function flickrrippr_form_alter(&$form, $form_state, $form_id) {
  switch($form_id) {
    case 'flickrapi_admin_settings':
      
      $fr = array('#type' => 'fieldset', '#title' => t('Flickr Rippr'), '#collapsible' => TRUE, '#collapsed' => FALSE);
//       $fr['cache_locally'] = array('#title' => t('Cache jpegs locally?'));
      $fr['import_tags'] = array('#title' => t('Import tags?'), '#type' => 'checkbox');
      foreach(taxonomy_get_vocabularies() as $v) { $options[$v->vid] = $v->name; }
      $fr['taxonomy'] = array('#title' => t('Taxonomy for tags'), '#type' => 'select', '#options' => $options);

      array_unshift($form, $fr);
    break;
  }
}

function flickrrippr_node_refresh_perm($nid) {
  return true;
  //TODO!
}
function flickrrippr_user_edit_account($uid, $flickrid) {
  $fuser = flickrrippr_get_flickr_user($uid, $flickrid);
  $output = drupal_get_form('flickrrippr_user_settings_form', $fuser);
  return $output;
}
function flickrrippr_user_add_account($uid) {
  $flickruser->uid = $uid;
  $output = drupal_get_form('flickrrippr_user_settings_form', $flickruser);
  return $output;
}

function flickrrippr_admin_edit($uid, $flickrid) {

  $fuser = flickrrippr_get_flickr_user($uid, $flickrid);
  return drupal_get_form('flickrrippr_user_settings_form', $fuser);
}

//TODO CHANGE TO FORM!
function flickrrippr_admin_fetch($uid, $flickrid) {
  $fuser = flickrrippr_get_flickr_user($uid, $flickrid);
  $new = flickrrippr_fetch_latest($fuser);
  drupal_goto('admin/content/flickrrippr');
}

function flickrrippr_get_flickr_user($uid, $flickrid) {
  return db_fetch_object(db_query("SELECT * FROM {flickrusers} WHERE uid=%d AND flickrid='%s'", $uid, $flickrid));
}

/**
 * This is called from admin menu, and will refresh the 20 oldest photos
 * TODO check this work in drupal6
 */
function flickrrippr_admin() {
  $output = '';

  $headers = array(
    array('data' => t('Name'), 'field' => 'name', 'sort'=>'asc'),
    array('data' => t('Flickr Username'), 'field' => 'flickrusername'),
    array('data' => t('Flickr NSID'), 'field' => 'flickrid'),
    array('data' => t('Tag'), 'field' => 'tag'),
  );
  $result = pager_query("SELECT u.uid, u.name, f.tag, f.flickrusername, f.flickrid FROM {users} u LEFT OUTER JOIN {flickrusers} f  ON u.uid = f.uid AND u.uid > 0". tablesort_sql($headers), 50);


  while ($u = db_fetch_object($result)) {
    $rows[] = array(
      $u->name,
      $u->flickrusername,
      $u->flickrid,
      $u->tag,
      ($u->flickrusername ? l(t('Fetch latest'), 'admin/content/flickrrippr/fetch/'. $u->flickrid) : ''),
      l(t('Edit Settings'), 'admin/content/flickrrippr/edit/'. $u->uid .'/'. $u->flickrid),
    );
  }
  $output .= theme('table', $headers, $rows);
  $output .= theme('pager');
  return $output;

}

function flickrrippr_load(&$node) {
  $node->flickr_photo = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d", $node->nid));
}

function flickrrippr_node_refresh($nid) {
  $node = node_load(array('nid' => $nid));
  $photo_id = $node->flickr_photo->flickrphoto_id;

 if (!$photo_id) {
	 drupal_set_message(t('Photo not found. This should never happen'), 'error');
 }
 else {
  flickrrippr_makenode($photo_id);
}
 drupal_goto('node/' . $nid);
}




/**
 * Called by cron, this check for new photos for each user
 * This function will recurse, reading futher back into the flickr stream
 * until it finds a photo it already has saved as a node
 */
function flickrrippr_check_latest_for_user($user_id, $pagenum = 1) {

  $output = '';


  //This function will recurse, reading futher back into the flickr stream until it finds a photo it already has saved as a node
 //maximum of 5 fetches.
  if ($pagenum > 5) {
    return 'done';
  }

  
 //fetches defails from our database
  $flickrusers =  flickrrippr_get_flickr_accounts($user_id);

  foreach($flickrusers as $fu) {
    flickrrippr_fetch_latest($fu);
  }
  return '';

}
function flickrrippr_fetch_latest($flickruser, $pagenum=0) {
 //fetches from api.flickr.com
//   if (!$flickr_settings->flickrid) {
//     $flickrsettings->flickrid = flickrrippr_flickruser($flickr_settings->flickrusername);
//   }
  //TODO, don't run every time.
  $num_photos = 20; //TODO make customisable
  
 //search flickr for latest photos from that user.
  $flickr = flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"));
    return $output;
  }
  
  $query = array(
    'user_id' => $flickruser->flickrid,
    'per_page' => $num_photos,
    'page' =>  $pagenum
  );

  if ($flickruser->tag) {
//     drupal_set_message(t("Filter to tag=%tag", array('%tag' =>$flickr_settings->tag)));
    $query['tags'] = check_plain($flickruser->tag);
  }
  drupal_set_message(print_r($query, 1));
  

  $photos = $flickr->photos_search($query);

  if (is_array($photos['photo'])) {
    foreach ($photos['photo'] as $p) {
      $new = flickrrippr_makenode($p['id']) || $new;
    }
  }

  //if we found a photo that wasn't new, then don't recurse
  if (!$new) {
    return FALSE;
  }
  return true;
  //recursive - call this function again to get the next 10;
  //flickrrippr_check_latest_for_user($user_id, $pagenum +1);

}





//
//function flickrrippr_addcomments($photo_id, $nid) {
//  $flickr = @flickrapi_phpFlickr();
//    if (!$flickr) {
//    drupal_set_message(t("Unable to query flickr.com, library missing"));
//    return $output;
//  }
//  $comments = $flickr->photos_comments_getList($photo_id);
//  if (!is_array($comments['comment'])) return;
//  foreach($comments['comment'] as $c) {
//   $result = db_query("SELECT cid from {flickrcomments} where flickrcomment_id = '%s'", $c['id']);
//   if (!db_num_rows($result)) {
//    $comment = array(
//         'nid' => $nid,
//	'status' => 1,
//	'timestamp' => $c['datecreate'],
//	'comment' => $c['_content'],
//	'name' => $c['authorname'],
//	'homepage' => 'http://flickr.com/photos/'. $c['author']);
//     	$cid = comment_save($comment);
//	if (!$cid) {
//		drupal_set_message('comment save failed', 'error');
//		return;
//	}
//
//
//      db_query("INSERT INTO {flickrcomments} (cid, flickrcomment_id, author, authorname, datecreate, permalink, content)
// VALUES (%d, '%s', '%s', '%s', %d, '%s', '%s')", $cid, $c['id'], $c['author'], $c['authorname'], $c['datecreate'], $c['permalink'], $c['_content']);
// 	 db_query("UPDATE {comments} set status =1, timestamp=%d where cid = %d", $c['datecreate'], $cid);
//    	 db_query("UPDATE {ua_logger} SET ua='<a href=\"http://flickr.com/photos/taniwha/\">Flickr</a>' where xid=%d and type='comment'", $cid);
//    }
//   }
//
// }

/**
 * Helper function, returns the flickr_id for a flickr username.
 */
function flickrrippr_flickruser($username) {
  $flickr = @flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"), 'error');
    return $output;
  }
  $fuser = $flickr->people_findByUsername($username);

  if (!$fuser['id']) {
    drupal_set_message(t('!username is not known by flickr.com', array('!username' => $username)), 'error');
    return;
  }
  db_query("UPDATE {flickrusers} SET flickrid='%s' WHERE flickrusername='%s'", $fuser['id'], $username);
  return $fuser['id'];
}

/**
 * Implementation of hook_cron().
 */
function flickrrippr_cron() {
  $result = db_query("SELECT * FROM {flickrusers} ORDER BY uid");

  while ($fuser = db_fetch_object($result)) {
    flickrrippr_check_latest_for_user($fuser->uid);
  }
}


/**
 * administer global settings
 */
function flickrrippr_admin_form() {
  $form = array();
  $form['instructions'] = array('#type' => 'markup', '#value' => 'Get your own API key from '. l('http://www.flickr.com/services/api/', 'http://www.flickr.com/services/api/'));

  $form['api_key'] = array(
        '#title' => 'Flickr Api Key',
        '#required' => TRUE,
        '#type' => 'textfield',
        '#default_value' => variable_get('flickrapikey', '')
      );
//   $form['jpegcache'] = array(
//       '#title' => 'Allow Local Cache',
//       '#type' => 'checkbox',
//       '#default_value' => variable_get('flickrjpegcache', TRUE),
//       '#description' => t('Allow users to cache flickr photo jpeg files locally'),
//       );

  $form['save'] = array(
     '#type' => 'submit',
     '#value' => t('Save'),
      );
  return $form;
}

/**
 * Validates the admin form
 */
function flickrrippr_admin_form_validate() {
}

/**
 * This runs after admin form is submitted, and saves our module's settings
 */
function flickrrippr_admin_form_submit($form, &$form_state) {
  $form_values = &$form_state['values'];
  variable_set('flickrapikey', $form_state['values']['api_key']);
//   variable_set('flickrjpegcache', $form_state['values']['jpegcache']);
  drupal_set_message(t('Settings saved'));
}


/**
 * Where a user defines their username
 */
function flickrrippr_user_settings($uid = NULL) {
  $output = '';
  if (!empty($uid) && user_access('Administer global flickr api settings')) {
    $user = user_load(array('uid' => $uid));
  }
  else {
    GLOBAL $user;
  }
  $output .= l(t('Add new account'), 'user/'. $user->uid . '/flickrrippr/add');

  $accounts = flickrrippr_get_flickr_accounts($user->uid);
  $headers = array(t('Flickr ID'), t('Flickr username'), t('Tag'));
  foreach($accounts as $a) {
    $rows[] = array(
      $a->flickrid,
      $a->flickrusername,
      $a->tag,
      drupal_get_form('flickrrippr_user_fetch_now', $user->uid, $a->flickrid),
      l(t('Edit'), 'user/'. $user->uid .'/flickrrippr/edit/'. $a->flickrid),
    );
    
  }
  $output .= theme('table', $headers, $rows);
  return $output;

}

function flickrrippr_user_fetch_now($v, $uid, $flickrid) {
  $form = array();
  $form['flickrid'] = array('#type' => 'hidden', '#value' => $flickrid);
  $form['uid'] = array('#type' => 'hidden', '#value' => $uid);
  $form['fetch'] = array('#type' => 'submit', '#value' => t('Fetch now'));
  return $form;
}
function flickrrippr_user_fetch_now_submit($form_id, $fv) {
//   $flickrid = $fv['values']['flickrid'];
  $flickrid = $_POST['flickrid'];
  $uid = $fv['values']['uid'];
  //get user
  $fuser = flickrrippr_get_flickr_user($uid, $flickrid);
  //and fetch
  flickrrippr_fetch_latest($fuser);
  drupal_goto('user/'. $uid .'/flickrrippr');
}

function flickrrippr_user_settings_form($a, $flickruser) {
  
  $form = array();
  drupal_set_title(t('Flickr Rippr settings for %username', array('%username' => $flickruser->flickrusername)));
  $form['flickrid'] = array('#type' => 'hidden', '#value' => $flickruser->flickrid);
  $form['uid'] = array('#type' => 'hidden', '#value' => $flickruser->uid);

  if (!$flickruser->flickrid) {
    $form['flickr_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Flickr Username'),
      '#default_value' => isset($flickruser->flickrusername) ? $flickruser->flickrusername : '',
      '#required' => TRUE
    );
  }

  $form['flickr_tag'] = array(
      '#type' => 'textfield',
      '#title' => t('Filter by Tag'),
      '#description' => t('If entered, only photos that have this tag will be imported. Be aware that your friends and family on flickr may also be allowed to tag your photos.'),
      '#default_value' => isset($flickruser->tag) ? $flickruser->tag : '',
    );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );
  return $form;
}

/**
 * Get a user's flickr settings from our database
 */
function flickrrippr_get_flickr_accounts($uid) {
  $result = db_query("SELECT * FROM {flickrusers} WHERE uid = %d ORDER BY lower(flickrusername)", $uid);
  while ($fuser = db_fetch_object($result)) {
    $flickr_users[] = $fuser;
  }
  return $flickr_users;
  
}


function flickrrippr_user_settings_form_validate($form, &$form_state) {
  //TODO, check the submitted username exists on flickr?
  //query api
  //and store the 3432@N00 uid then
}
function flickrrippr_user_settings_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['uid'])) {
    $user = user_load(array('uid' => intval($form_state['values']['uid'])));
  }
  else {
    GLOBAL $user;
  }

  //TODO fix call to flickrrippr_get_flickr_accounts
  $flickr_account = flickrrippr_get_flickr_user($form_state['values']['uid'], $form_state['values']['flickrid']);

  if (isset($flickr_account->flickrusername)) {
    $result = db_query("UPDATE {flickrusers} SET tag='%s' WHERE uid = %d AND flickrid='%s'",
      $form_state['values']['flickr_tag'],
      $user->uid,
      $form_state['values']['flickrid']);
    drupal_set_message(t("Flickr account updated"));
  }
  else {
    $result = db_query("INSERT INTO {flickrusers} (flickrusername, flickrid, tag, uid) VALUES ('%s', '%s', '%s', %d)",
      $form_state['values']['flickr_username'],
      $flickrid,
      $form_state['values']['flickr_tag'],
      $user->uid);
    drupal_set_message(t("Flickr username set"));
  }
  drupal_goto('user/'. $user->uid .'/flickrrippr');
}

/**
 * Used when attempting to edit a flickrphoto node.
 */
function flickrrippr_form(&$node) {
  $form = array();
  //TODO add instructions on edit the photo on flickr.com

//   $form['flickr'] = array('#type' => 'fieldset',
//                               '#collapsible' => TRUE,
//                           '#title' => t('Flickr API queries'),
//                          );
//   $form['flickr']['cache'] = array(
//                                    '#type' => 'checkbox',
//                                    '#title' => t('Cache jpeg locally'),
//                                   );
/*
  $form['flickr']['refresh'] = array(
                                     '#type' => 'checkbox',
                                     '#title' => t('Refresh details from flickr.com'),
                                    );
  $form['flickr']['jpeg_refresh'] = array(
                                          '#type' => 'checkbox',
                                          '#title' => t('Refresh cached jpeg'),
                                         );
  $form['flickr']['link'] = array(
                                  '#type' => 'checkbox',
                                  '#title' => t('Show link to flickr photo page'),
                                 );*/

//   $form['size'] = array('#type' => 'fieldset',
//                         '#collapsible' => TRUE,
//                         '#title' => t('Image sizes'),
//                        );
//   $sizes = array('t' => t('Thumbnail'),
//                  's' => t('Square'),
//                           'm' => t('Medium'),
//                                    '' => t('Default')
//                 );
//   $form['size']['teaser_size'] = array(
//                                        '#type' => 'select',
//                                        '#options' => $sizes,
//                                        '#title' => t('Teaser Size'),
//                                            '#description' => t('Size of jpeg shown in node teaser'),
//                                       );
//   $form['size']['page_size'] = array(
//                                      '#type' => 'select',
//                                      '#options' => $sizes,
//                                      '#title' => t('Page Size'),
//                                          '#description' => t('Size of jpeg shown in node page and rss feed'),
//                                     );
//   $form['nid'] = array(
//                        '#type' => 'hidden',
//                        '#value' => $node->nid,
//                       );

  return $form;
}

function flickrrippr_node_info() {
  return array(
    'flickrrippr_photo' => array(
      'name' => t('Flickr Rippr Photo'),
      'module' => 'flickrrippr',
      'description' => t("Photos imported from a user's flickr stream"),
      'has_body' => FALSE,
      )
    );

}

function flickrrippr_failed_form($form, $node) {
  $form = array();
  $form['message'] = array(
    '#type' => 'markup',
    '#value' => t('Photo no longer available on flickr.com, do you want to delete?') . ' ',
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Yes, Delete from this website'),
  );
  return $form;
}

function flickrrippr_failed_form_submit($form, $fv) {
  $nid = $fv['values']['nid'];
  node_delete($nid);
//   drupal_set_message(t('Flickr photo delete from this website'));
  drupal_goto('<front>');
  
}

function flickrrippr_view(&$node, $teaser = FALSE, $page = FALSE) {
  
  $photo = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d LIMIT 1", $node->nid));

  if (!$photo || $photo->failed == 1) {
    if (node_access('delete', $node)) {
      drupal_set_message(t("Failed to find flickr photo info for !link", array('!link' => l($node->title, 'node/'. $node->nid))), 'error');
      $node->content['delete'] = array(
        '#value' => drupal_get_form('flickrrippr_failed_form', $node),
        '#weight' => -10,
      );
    }
//     return $node;
  }

  if ($page) {
    $image = '<img src="'. htmlentities($photo->photo_path) .'" />';
    $image = '<a href="' . htmlentities($photo->page_url) .'">'. $image .'</a>';
  }
  else {
    $image = '<img src="'. htmlentities($photo->thumbnail_path) .'" />';
    $image = '<a href="'. url('node/'. $node->nid) .'">'. $image .'</a>';
  }

  $node->content['flickr_photo'] = array(
    '#weight' => 0,
   '#value' => '<div class="flickrrippr_photo">'. $image .'</div>',
  );

  $node->content['flickr_description'] = array(
    '#value' => '<div class="flickrriprr_description">'. check_plain($photo->description)  .'</div>', //decode then encode
    '#weight' => 5
  );
  
  $node->content['body'] = array();
  
  return $node;
}


function flickrrippr_node_form(&$form_state, $node) {
}

/**
 * 
 */
function flickrrippr_nodeapi(&$node, $op, $teaser, $page) {
  if (!preg_match('!^flickrrippr_!', $node->type)) {
    return;
  }
  
  switch ($op) {
    case 'delete':
      //delete where there is no node.. THIS WON'T SCALE
      //how to get around drupal's lack of referential integrity?
      db_query('DELETE FROM {flickrphotos} WHERE nid NOT IN (SELECT nid FROM {node});');
      drupal_set_message("Flickr photo deleted");
    break;
    case 'view':
      flickrrippr_view($node, $teaser, $page);
    break;
  }
}

