<?php
include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');

/**
 * Implementation of hook_perm().
 */
function flickrrippr_perm() {
  return array('Configure own blogged flickr stream', 'Administer global flickr api settings', /* 'Cache own Flickr Photos on this server'*/);
}

/**
 * Implementation of hook_menu().
 */
function flickrrippr_menu() {
  GLOBAL $user;
  $items = array();
  $items['admin/content/flickrrippr'] = array(
    'title' => t('Flickr Rippr'),
    'description' => t('View users, and force re-read from flickr.com'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'flickrrippr_admin',
    'access arguments' => array('Administer global flickr api settings'),
    'file' => 'flickrrippr.admin.inc',
  );

  $items['admin/content/flickrrippr/fetch'] = array(
    'title' => t('Fetch'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_fetch',
    'page arguments' => array(4),
    'access arguments' => array('Administer global flickr api settings'),
    'file' => 'flickrrippr.admin.inc',
  );

  $items['admin/content/flickrrippr/edit'] = array(
    'title' => t('Edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_edit',
    'page argument' => array(4, 5),
    'access arguments' => array('Administer global flickr api settings'),
    'file' => 'flickrrippr.admin.inc',
  );

  //configure a user's account with their flickr username
  $items['user/%/flickrrippr'] = array(
    'title' => t('Flickr Rippr'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'flickrrippr_user_settings',
    'page arguments' => array(1),
    'access arguments' => array('Configure own blogged flickr stream'),
    'file' => 'flickrrippr.user.inc',
  );
  $items['user/%/flickrrippr/add'] = array(
    'title' => t('add'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_add_account',
    'page arguments' => array(1),
    'access arguments' => array('Configure own blogged flickr stream'),
    'file' => 'flickrrippr.user.inc',
  );
  $items['user/%/flickrrippr/edit/%'] = array(
    'title' => t('edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_edit_account',
    'page arguments' => array(1, 4),
    'access arguments' => array('Configure own blogged flickr stream'),
    'file' => 'flickrrippr.user.inc',
  );

  $items['user/%/flickrrippr/view/%'] = array(
    'title' => t('View Photos'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_view_photos',
    'page arguments' => array(1, 4),
    'access arguments' => array('Configure own blogged flickr stream'),
    'file' => 'flickrrippr.user.inc',
  );

  $items['user/%/flickrrippr/delete/%'] = array(
    'title' => t('edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickrrippr_user_delete_account', 1, 4),
    'access arguments' => array('Configure own blogged flickr stream'),
    'type' => MENU_CALLBACK,
  );


  $items['node/%/flickrrefresh'] = array(
    'title' => 'Re-fetch from Flickr',
    'page callback' => 'flickrrippr_node_refresh',
    'page arguments' => array(1),
    'access callback' => 'flickrrippr_node_refresh_perm',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/flickrrippr'] = array(
    'title' => 'Flickr Rippr',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickrrippr_admin_settings_form'),
    'access arguments' => array('Administer global flickr api settings'),
    'description' => 'Configure the settings for Shadowbox.',
    'file' => 'flickrrippr.admin.inc',
  );
  $items['admin/settings/flickrrippr/global'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickrrippr_admin_settings_form'),
    'access arguments' => array('Administer global flickr api settings'),
    'description' => 'Configure the settings for Shadowbox.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'flickrrippr.admin.inc',
  );
  return $items;
}

function flickrrippr_user_delete_account($form, $uid, $flickrid) {
  $form = array();
  $form['uid'] = array('#type' => 'hidden', '#value' => $uid);
  $form['flickrid'] = array('#type' => 'hidden', '#value' => $flickrid);
  
  $form['message'] = array(
    '#type' => 'markup',
    '#value' => '<p>'. t('Are you sure you want to delete this account?') . '</p>'
  );

  $form['confirm'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  return $form;
}

function flickrrippr_user_delete_account_submit($form_id, $form_state) {
  $uid = $form_state['values']['uid'];
  $flickrid = $form_state['values']['flickrid'];
  db_query("DELETE FROM {flickrusers} WHERE uid=%d AND flickrid='%s'", $uid, $flickrid);
  drupal_goto('user/'. $uid .'/flickrrippr');
}

function flickrrippr_node_refresh_perm($nid) {
  //check if this has a photo id
  $photo_id = flickrrippr_node_get_photoid($nid);
  
  if (!$photo_id) {
    return FALSE;
  }

  $node = node_load(array('nid' => $nid));
  return node_access('update', $node);
}




/**
 * Get the details of a flickr user from the database
 */
function flickrrippr_get_flickr_user($uid, $flickrid) {
  return db_fetch_object(db_query("SELECT * FROM {flickrusers} WHERE uid=%d AND flickrid='%s'", $uid, $flickrid));
}

/**
 * Loading of the node
 */
function flickrrippr_load(&$node) {
  $node->flickr_photo = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d", $node->nid));
}

/**
 * Re-fetch a photo from flickr
 */
function flickrrippr_node_refresh($nid) {

  $photo_id = flickrrippr_node_get_photoid($nid);

  if (!$photo_id) {
    drupal_set_message(t('Photo not found. This should never happen'), 'error');
  }
  else {
    flickrrippr_makenode($photo_id);
  }

  drupal_goto('node/' . $nid);
}




/**
 * Called by cron, this check for new photos for each user
 * This function will recurse, reading futher back into the flickr stream
 * until it finds a photo it already has saved as a node
 */
function flickrrippr_check_latest_for_user($user_id, $pagenum = 1) {
 //fetches defails from our database
  $flickrusers =  flickrrippr_get_flickr_accounts($user_id);

  foreach ($flickrusers as $fu) {
    flickrrippr_fetch_latest($fu);
  }
}



/**
 * Get the latest from flickr.com for one user
 */
function flickrrippr_fetch_latest($flickruser, $pagenum=0) {

  //update their user info
  job_queue_add('flickrrippr_fetch_user_info_and_save', t('Update details for flickr user %flickrusername', array('%flickrusername' => $flickruser->flickrusername)), array($flickruser), drupal_get_path('module', 'flickrrippr') .'/flickrrippr.user.inc');

  $num_photos = variable_get('flickrrippr_num_per_fetch', 100);

 //search flickr for latest photos from that user.
  $flickr = flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"), 'error');
    watchdog('flickrrippr', 'Unable to query flickr.com');
    return FALSE;
  }

  $query = array(
    'user_id' => $flickruser->flickrid,
    'per_page' => $num_photos,
    'page' =>  $pagenum
  );

  if ($flickruser->tag) {
    $query['tags'] = check_plain($flickruser->tag);
  }

  $photos = $flickr->photos_search($query);
  $num_photos = 0;
  if (is_array($photos['photo'])) {
    foreach ($photos['photo'] as $p) {
      //only fetch if there's new stuff
//       $local_cached_details = flickrrippr_get_photo_details_by_photoid($p['id']);
//       if (!$local_cached_details) {
        //only queue if it hasn't been fetched in last hour.

        //hack to get around job_queue restricting descriptions to 255 chars
        $description = t("Save node for flickr photo %id owned by %username", array('%id' => $p['id'], '%username' => print_r($flickruser, 1)));
        if(strlen($description) >= 255) {
          $description = substr($description, 0, 254);
        }
        job_queue_add('flickrrippr_makenode', $description, array($p['id']));
        $num_photos++;
      }
//     }
  }

  drupal_set_message(t('!count photos queued for import.', array('!count' => $num_photos)));

}

/**
 * Helper function, returns the flickr_id for a flickr username.
 */
function flickrrippr_flickruser($username) {
  $flickr = @flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"), 'error');
    return $output;
  }
  $fuser = $flickr->people_findByUsername($username);

  if (!$fuser['id']) {
    drupal_set_message(t('!username is not known by flickr.com', array('!username' => $username)), 'error');
    return;
  }
  db_query("UPDATE {flickrusers} SET flickrid='%s' WHERE flickrusername='%s'", $fuser['id'], $username);
  return $fuser['id'];
}

/**
 * Implementation of hook_cron().
 */
function flickrrippr_cron() {
  //get missing flickrids
//   flickrrippr_add_missing_flickrids();

  $result = db_query("SELECT * FROM {flickrusers} ORDER BY uid");

  while ($fuser = db_fetch_object($result)) {
    flickrrippr_check_latest_for_user($fuser->uid);
  }
}
/*

function flickrrippr_add_missing_flickrids() {
  $result = db_query_range("SELECT * FROM {flickrusers} WHERE flickrid = '' OR flickrid IS NULL LIMIT 100");
  while($fu = db_fetch_object($result)) {
    drupal_set_message(t("Fetching nsid for %username", array('%username' => $fu->flickrusername)));
    $flickr = flickrapi_phpFlickr();
    if (!$flickr) {
      drupal_set_message(t("Unable to query flickr.com, library missing"), 'error');
      return;
    }
    $result = $flickr->people_findByUsername($fu->flickrusername);
    $id = $result['id'];
    drupal_set_message($id);
    db_query("UPDATE {flickrusers} SET flickrid='%s' WHERE uid=%d AND flickrusername='%s'", $id, $fu->uid, $fu->flickrusername); 
  }
}*/


/**
 * Where a user defines their username
 */
function flickrrippr_user_settings($uid = NULL) {
  $output = '';
  if (!empty($uid) && user_access('Administer global flickr api settings')) {
    $user = user_load(array('uid' => $uid));
  }
  else {
    GLOBAL $user;
  }
  $output .= l(t('Add new account'), 'user/'. $user->uid . '/flickrrippr/add');

  $accounts = flickrrippr_get_flickr_accounts($user->uid);


  $headers = array('', 
    t('Flickr ID'), 
    t('Flickr username'), 
    t('Tag')
  );
  $rows = array();
  foreach ($accounts as $a) {

    $tag_links = '';

    if (!empty($a->tag) ) {
      $tags = explode(',', $a->tag);
      foreach ($tags as $t) {
        if (!empty($a->flickrphotosurl)) {
          $tag_links .= l($t, $a->flickrphotosurl .'tags/'. check_plain($t));
        }
        else {
          $tag_links .= check_plain($t);
        }
      }
    }
  
    $avatar = flickrrippr_user_avatar($a);

    $rows[] = array(
      $avatar,
      $a->flickrid,
      check_plain($a->flickrusername),
      $tag_links,
      drupal_get_form('flickrrippr_user_fetch_now', $user->uid, $a->flickrid),
      l(t('Edit'), 'user/'. $user->uid .'/flickrrippr/edit/'. $a->flickrid),
      l('View Photos', 'user/'. $user->uid .'/flickrrippr/view/'. $a->flickrid),
    );
    
  }
  $output .= theme('table', $headers, $rows);
  return $output;

}

function flickrrippr_user_avatar($a) {
  if (isset($a->flickravatar) && !empty($a->flickravatar) && !preg_match('!farm0!', $a->flickravatar)) {
    //make image
    $avatar = theme('image', check_plain($a->flickravatar), check_plain($a->flickrusername), check_plain($a->flickrusername), array(), FALSE);
    //and put link around it
    $avatar = l($avatar, $a->flickrphotosurl, array('html' => TRUE));
  }
  else {
    $avatar = '';
  }
  return $avatar;
}

function flickrrippr_user_fetch_now($v, $uid, $flickrid, $dest='') {
  $form = array();
  $form['flickrid'] = array('#type' => 'hidden', '#value' => $flickrid);
  $form['uid'] = array('#type' => 'hidden', '#value' => $uid);
  $form['dest'] = array('#type' => 'hidden', '#value' => $dest);
  $form['fetch'] = array('#type' => 'submit', '#value' => t('Fetch now'));
  return $form;
}


/**
 * Manually fetch all the latest for a user
 */
function flickrrippr_user_fetch_now_submit($form_id, $fv) {
//   $flickrid = $fv['values']['flickrid'];
  $flickrid = $_POST['flickrid'];
  $uid = $_POST['uid'];
  $dest = $_POST['dest'];

  if (!$dest) {
    $dest = 'user/'. $uid .'/flickrrippr';
  }
  //get user
  $fuser = flickrrippr_get_flickr_user($uid, $flickrid);
  if (!$fuser) {
    drupal_set_message(t('Flickr user (uid=%uid, flickrid=%flickrid) not found in our database', array('%uid' => $uid, '%flickrid' => $flickrid)), 'error');
    return;
  }

  drupal_set_message(t("Fetching latest for %flickrid", array("%flickrid" => $flickrid)));


  //and fetch
  flickrrippr_fetch_latest($fuser);

  drupal_goto(check_plain($dest));
}

/**
 * Used when attempting to edit a flickrphoto node.
 */
function flickrrippr_form(&$node) {
  $form = array();
  //TODO add instructions on edit the photo on flickr.com

  return $form;
}

function flickrrippr_node_info() {
  return array(
    'flickrrippr_photo' => array(
      'name' => t('Flickr Rippr Photo'),
      'module' => 'flickrrippr',
      'description' => t("Photos imported from a user's flickr stream"),
      'has_body' => FALSE,
      )
    );
}

/**
 * Instead of displaying a damaged node, display a form for deleting it
 */
function flickrrippr_failed_form($form, $node) {
  $form = array();
  $form['message'] = array(
    '#type' => 'markup',
    '#value' => t('Photo no longer available on flickr.com, do you want to delete?') . ' ',
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Yes, Delete from this website'),
  );
  return $form;
}

function flickrrippr_failed_form_submit($form, $fv) {
  $nid = $fv['values']['nid'];
  node_delete($nid);
//   drupal_set_message(t('Flickr photo delete from this website'));
  drupal_goto('<front>');
  
}

function flickrrippr_view(&$node, $teaser = FALSE, $page = FALSE) {
  
  $photo = db_fetch_array(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d", $node->nid));


  if (!$photo['farm'] || !$photo['server'] || !$photo['secret']) {
      GLOBAL $_FR_refresh_count;

      if ($_FR_refresh_count  < 5) {
        flickrrippr_makenode($photo['flickrphoto_id']);
        $photo = db_fetch_array(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d", $node->nid));
        $_FR_refresh_count++;
      }
  }

  if (!$photo || $photo['failed'] == 1) {
    if (node_access('delete', $node)) {
      drupal_set_message(t("Failed to find flickr photo info for !link", array('!link' => l($node->title, 'node/'. $node->nid))), 'error');
      $node->content['delete'] = array(
        '#value' => drupal_get_form('flickrrippr_failed_form', $node),
        '#weight' => -10,
      );
    }
    return $node;
  }

  if ($page) {
    $size = variable_get('flickrrippr_page_size', 'm');
    $link = $photo['photopage'];
  }
  else {
    $size = variable_get('flickrrippr_teaser_size', 't');
    $link = 'node/'. $node->nid;
  }

//   drupal_set_message(print_r($photo, 1));
  $jpeg_path = flickrrippr_path($photo, $size);

  
  $image = l(theme('image', $jpeg_path, $teaser, $teaser, NULL, FALSE), $link, array('html' => TRUE));

  $node->content['flickr_photo'] = array(
    '#weight' => 0,
   '#value' => '<div class="flickrrippr_photo">'. $image .'</div>',
  );


  $markup_trust = variable_get('flickrrippr_markup_trust', FALSE);

  $node->content['body'] = array(
    '#value' => '<div class="flickrrippr_description">'. nl2br($markup_trust ? $photo['description'] : check_plain($photo['description']))  .'</div>', //decode then encode
    '#weight' => 5
  );
  
//   $node->content['body'] = array();
  
  return $node;
}


function flickrrippr_node_form(&$form_state, $node) {
}

/**
 * 
 */
function flickrrippr_nodeapi(&$node, $op, $teaser, $page) {
  if (!isset($node->nid)) {
    return;
  }
  $photo_id = flickrrippr_node_get_photoid($node->nid);
  if (!$photo_id) {
    //not a flickr photo
    return;
  }
  switch ($op) {
    case 'delete':
      db_query('DELETE FROM {flickrphotos} WHERE nid = %d', $node->nid); 
      drupal_set_message("Flickr Rippr photo deleted.");
    break;
    case 'view':
      flickrrippr_view($node, $teaser, $page);
    break;
  }
}

