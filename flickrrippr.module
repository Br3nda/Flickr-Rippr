<?php
// $Id: flickrrippr.module,v 1.101 2010/07/14 01:21:31 taniwha Exp $


include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');

/**
 * Implementation of hook_perm().
 */
function flickrrippr_perm() {
  return array('Configure own blogged flickr stream', 'Administer global flickr api settings', /* 'Cache own Flickr Photos on this server'*/);
}

/**
 * Implementation of hook_menu().
 */
function flickrrippr_menu() {
  GLOBAL $user;
  $items = array();
  $items['admin/content/flickrrippr'] = array(
    'title' => t('Flickr Rippr'),
    'description' => t('View users, and force re-read from flickr.com'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'flickrrippr_admin',
    'access arguments' => array('Administer global flickr api settings'),
  );

  $items['admin/content/flickrrippr/fetch'] = array(
    'title' => t('Fetch'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_fetch',
    'access arguments' => array('Administer global flickr api settings'),
  );

  $items['admin/content/flickrrippr/edit'] = array(
    'title' => t('Edit'),
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_admin_edit',
    'access arguments' => array('Administer global flickr api settings'),
  );

  //configure a user's account with their flickr username
  $items['user/flickrrippr'] = array(
    'title' => t('My Flickr Photo settings'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'flickrrippr_user_settings',
    'access arguments' => array('Configure own blogged flickr stream'),
  );

    //configure a user's account with their flickr username
  $items['user/flickrrippr/delete'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'flickrrippr_user_settings_delete',
    'access arguments' => array('Configure own blogged flickr stream'),
  );
  /*
  	//The refresh tab
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      //TODO - there has gotta be a better way to work out this is a flickrrippr node
      $node = node_load(array('nid' => arg(1)));
      if ($node->type == 'flickrrippr') {
        $items['node/'. arg(1) .'/flickr-refresh'] = array(
          'title' => t('Refresh'),
          'callback' => 'flickrrippr_node_refresh',
          'access' => user_access('Administer global flickr api settings'),
          'callback arguments' => arg(1),
          'access' => user_access('Configure own blogged flickr stream'),
          'type' => MENU_IS_LOCAL_TASK);
      }
    }


    //create a page for thumbnails, of every user that has settings saved
    //TODO this really really doesn't scale
    $result = db_query("SELECT u.name, u.uid, flickrusername from {flickrusers} f INNER JOIN {users} u ON f.uid = u.uid ORDER BY u.name");
    while ($r = db_fetch_object($result)) {
      $items['flickrrippr/thumbs/'. $r->uid] = array(
                      'title' => t('!name\'s Photos', array('!name' => $r->name)),
                      'callback arguments' => array($r->flickrusername, $r->uid),
                      'type' => MENU_NORMAL_ITEM,
                      'callback' => 'flickrphoto_thumbnails',
                      'access' => TRUE,
                    );
    }
  */
  return $items;
}

function flickrrippr_admin_edit($uid) {
  drupal_set_message('TODO');
//   $user = user_load(array('uid' => $uid));
//   $flickr_accounts = flickrrippr_user_get_accounts($user->uid);
//   drupal_set_message(print_r($flickr_accounts, 1));
//   foreach($flickr_accounts as $account) {
//     $rows[] = array(print_r($account, 1));
//   }
//   return theme('table', $headers, $rows);
  //return drupal_get_form('flickrrippr_user_settings_form', $user);
}

function flickrrippr_admin_fetch($uid) {
  flickrrippr_check_latest(intval($uid));
  drupal_goto('admin/content/flickrrippr');
}

/**
 * This is called from admin menu, and will refresh the 20 oldest photos
 * TODO check this work in drupal6
 */
function flickrrippr_admin() {
  $output = '';

  $headers = array(
    array('data' => t('Name'), 'field' => 'name', 'sort'=>'desc'),
    array('data' => t('Flickr Username'), 'field' => 'flickrusername'),
    array('data' => t('Flickr NSID'), 'field' => 'flickrid'),
  );
  $result = pager_query("SELECT u.uid, u.name, f.flickrusername, f.flickrid FROM {users} u LEFT OUTER JOIN {flickrusers} f  ON u.uid = f.uid AND u.uid > 0". tablesort_sql($headers));


  while ($u = db_fetch_object($result)) {
    $rows[] = array(
      $u->name,
      $u->flickrusername,
      $u->flickrid,
      ($u->flickrusername ? l(t('Fetch latest'), 'admin/content/flickrrippr/fetch/'. $u->uid) : ''),
      l(t('Edit Settings'), 'admin/content/flickrrippr/edit/'. $u->uid),
    );
  }
  $output .= theme('table', $headers, $rows);
  $output .= theme('pager');
  return $output;

}


//function flickrrippr_node_refresh($nid) {
//  $photo_id = flickrrippr_get_photo_id($nid);
//  if (!$photo_id) {
//	return t('Photo not found');
//  }
//  flickrrippr_makenode($photo_id);
//  drupal_goto('node/' . $nid);
//}




/**
 * Called by cron, this check for new photos for each user
 * This function will recurse, reading futher back into the flickr stream
 * until it finds a photo it already has saved as a node
 */
function flickrrippr_check_latest($user_id, $pagenum = 1) {

  $output = '';
  //TODO, don't run every time.
  $num_photos = 20; //TODO make customisable

  //This function will recurse, reading futher back into the flickr stream until it finds a photo it already has saved as a node
 //maximum of 5 fetches.
  if ($pagenum > 5) {
    return 'done';
  }
  
  
 //fetches defails from our database
  $flickr_settings = flickrrippr_user_settings_get($user_id);
  
 //fetches from api.flickr.com
  if (!$flickr_settings->flickrid) {
    $flickrsettings->flickrid = flickrrippr_flickruser($flickr_settings->flickrusername);
  }

  
 //search flickr for latest photos from that user.
  $flickr = flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"));
    return $output;
  }
  
  $query = array(
    'user_id' => $flickr_settings->flickrid,
    'per_page' => $num_photos,
    'page' =>  $pagenum
    );
  if ($flickr_settings->tag) {
//     drupal_set_message(t("Filter to tag=%tag", array('%tag' =>$flickr_settings->tag)));
    $query['tags'] = check_plain($flickr_settings->tag);
  }
  

  $photos = $flickr->photos_search($query);
  //drupal_set_message(__FUNCTION__ .' photos: '. print_r($photos, 1));

  $new = TRUE;
  if (is_array($photos['photo'])) {
    foreach ($photos['photo'] as $p) {
      $new = (flickrrippr_makenode($p['id']) && $new);
    }
  }
  else {
//     drupal_set_message(t('No photos found'));
  }
  //if we found a photo that wasn't new, then don't recurse
  if (!$new) {
//     drupal_set_message(t('No new photos'));
    return FALSE;
  }
  //recursive - call this function again to get the next 10;
  //flickrrippr_check_latest($user_id, $pagenum +1);

}


/**
 * get the node id for a flickr photo id
 */
function flickrrippr_photo_get_nid($photo_id) {
  $rec = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE flickrphoto_id = '%s'", $photo_id));
  return (!empty($rec->nid) ? $rec->nid : NULL);
}

///**
//* Makes a node for a flickr photo - or updates if it already exists
//*/
function flickrrippr_makenode($photo_id) {


  if (!$photo_id) {
    drupal_set_message(t("Photo_id required"), 'error');
    return;
  }

//   drupal_set_message(t("Fetching data from flickr .com for photoid=%photo_id", array('%photo_id' => $photo_id)));
// 
  $nid = flickrrippr_photo_get_nid($photo_id) ;
  if (!empty($nid)) {
//     //already exists
    $node = node_load(array('nid' => $nid));
//     drupal_set_message(t('Existing node id = !nid. !link.', array('!nid' => $nid, '!link' => l(check_plain($node->title), 'node/'. $nid))));
  }
  else {
  
  }

  $flickr = flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com, library missing"));
    return $output;
  }

  //Info to put into the node
  $flickr_info = $flickr->photos_getInfo($photo_id);
  $flickr_context = $flickr->photos_getContext($photo_id);

  //flickr username
  $flickrusername = $flickr_info['owner']['username'];
//   drupal_set_message(t("Making a node for photo by %flickrusername", array('%flickrusername' => $flickrusername)));

  //get user details
  $user = flickrrippr_get_user_by_flickrusername($flickrusername);
  if (!$user) {
    drupal_set_message(t("User doesn't exist, unable to save photo %photo_id", array('%photo_id' => $photo_id)));
    return FALSE;
  }

  //Full (normal) sized image
  $photo_path =  flickrrippr_path($flickr_info);
  $thumbnail_path =  flickrrippr_path($flickr_info, TRUE, 'm');
  $description = $flickr_info['description'];
  $title = $flickr_info['title'];
  $page_url = $flickr_info['urls']['url'][0]['_content'];

  
  $node->title = htmlentities($title);
  $node->created = strtotime($flickr_info['dates']['taken']);
//   $node->name = $user->name;
  $node->uid = $user->uid;
  $node->type = 'flickrrippr_photo';
//   $node->published = 1;
//   $node->status =1;
//   $node->comment = 2;
//   $node->promote = 1;
//   $node->format = 2;

  node_save($node);

  if ($node->is_new) {
//     drupal_set_message("New node, nid = $node->nid");
    $result = db_query("INSERT INTO {flickrphotos} (flickrphoto_id, nid, lastfetched, photo_path, thumbnail_path, description, page_url)
      VALUES ('%s', %d, %d, '%s', '%s', '%s', '%s')",
      $photo_id, $node->nid, strtotime('now'), $photo_path, $thumbnail_path, $description, $page_url);
      drupal_set_message(t("Saved new photo %photo_id, ". l($node->title, 'node/' . $node->nid), array('%photo_id' => $photo_id)));
  }
  else {
    $result = db_query("UPDATE {flickrphotos} SET
      lastfetched=%d,
      photo_path='%s',
      thumbnail_path='%s',
      description = '%s',
      page_url = '%s'
      WHERE flickrphoto_id=%d AND nid=%d",
      strtotime('now'),
      $photo_path,
      $thumbnail_path,
      $description,
      $page_url,
      $photo_id,
      $node->nid);
    drupal_set_message(t("Updated photo %photo_id, ". l($node->title, 'node/' . $node->nid), array('%photo_id' => $photo_id)));
  }
}



//
//function flickrrippr_addcomments($photo_id, $nid) {
//  $flickr = @flickrapi_phpFlickr();
//    if (!$flickr) {
//    drupal_set_message(t("Unable to query flickr.com, library missing"));
//    return $output;
//  }
//  $comments = $flickr->photos_comments_getList($photo_id);
//  if (!is_array($comments['comment'])) return;
//  foreach($comments['comment'] as $c) {
//   $result = db_query("SELECT cid from {flickrcomments} where flickrcomment_id = '%s'", $c['id']);
//   if (!db_num_rows($result)) {
//    $comment = array(
//         'nid' => $nid,
//	'status' => 1,
//	'timestamp' => $c['datecreate'],
//	'comment' => $c['_content'],
//	'name' => $c['authorname'],
//	'homepage' => 'http://flickr.com/photos/'. $c['author']);
//     	$cid = comment_save($comment);
//	if (!$cid) {
//		drupal_set_message('comment save failed', 'error');
//		return;
//	}
//
//
//      db_query("INSERT INTO {flickrcomments} (cid, flickrcomment_id, author, authorname, datecreate, permalink, content)
// VALUES (%d, '%s', '%s', '%s', %d, '%s', '%s')", $cid, $c['id'], $c['author'], $c['authorname'], $c['datecreate'], $c['permalink'], $c['_content']);
// 	 db_query("UPDATE {comments} set status =1, timestamp=%d where cid = %d", $c['datecreate'], $cid);
//    	 db_query("UPDATE {ua_logger} SET ua='<a href=\"http://flickr.com/photos/taniwha/\">Flickr</a>' where xid=%d and type='comment'", $cid);
//    }
//   }
//
// }

/**
 * Helper function, returns the flickr_id for a flickr username.
 */
function flickrrippr_flickruser($username) {
  $flickr = @flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"), 'error');
    return $output;
  }
  $fuser = $flickr->people_findByUsername($username);

  if (!$fuser['id']) {
    drupal_set_message(t('!username is not known by flickr.com', array('!username' => $username)), 'error');
    return;
  }
  db_query("UPDATE {flickrusers} SET flickrid='%s' WHERE flickrusername='%s'", $fuser['id'], $username);
  return $fuser['id'];
}

/**
 * Implementation of hook_cron().
 */
function flickrrippr_cron() {
  $result = db_query("SELECT * FROM {flickrusers} ORDER BY uid");

  while ($fuser = db_fetch_object($result)) {
    flickrrippr_check_latest($fuser->uid);
  }
}


/**
 * administer global settings
 */
function flickrrippr_admin_form() {
  $form = array();
  $form['instructions'] = array('#type' => 'markup', '#value' => 'Get your own API key from '. l('http://www.flickr.com/services/api/', 'http://www.flickr.com/services/api/'));

  $form['api_key'] = array(
        '#title' => 'Flickr Api Key',
        '#required' => TRUE,
        '#type' => 'textfield',
        '#default_value' => variable_get('flickrapikey', '')
      );
//   $form['jpegcache'] = array(
//       '#title' => 'Allow Local Cache',
//       '#type' => 'checkbox',
//       '#default_value' => variable_get('flickrjpegcache', TRUE),
//       '#description' => t('Allow users to cache flickr photo jpeg files locally'),
//       );

  $form['save'] = array(
     '#type' => 'submit',
     '#value' => t('Save'),
      );
  return $form;
}

/**
 * Validates the admin form
 */
function flickrrippr_admin_form_validate() {
}

/**
 * This runs after admin form is submitted, and saves our module's settings
 */
function flickrrippr_admin_form_submit($form, &$form_state) {
  $form_values = &$form_state['values'];
  variable_set('flickrapikey', $form_state['values']['api_key']);
//   variable_set('flickrjpegcache', $form_state['values']['jpegcache']);
  drupal_set_message(t('Settings saved'));
}

function flickrrippr_user_settings_delete($flickrid) {

  $account = flickrrippr_account_get($flickrid);
  if(!user_access('Administer global flickr api settings')) {
    GLOBAL $user;
    if($account->uid != $user->uid) {
      drupal_set_message(t('Unable to edit other users', 'error'));
      return;
    }
  }

  db_query("DELETE FROM {flickrusers} WHERE flickrid='%s'", $flickrid);
  drupal_goto('user/flickrrippr');
  
}

function flickrrippr_user_settings_edit($flickrid) {
  return drupal_get_form('flickrrippr_account_settings_form', $flickrid);
}

/**
 * Where a user defines their username
 */
function flickrrippr_user_settings($uid = NULL) {

  $output = '';

  
  if (!empty($uid) && user_access('Administer global flickr api settings')) {
    $user = user_load(array('uid' => $uid));
  }
  else {
    GLOBAL $user;
  }

  $output .= l('Add new account', 'flickrrippr/add/'. $uid);

  $headers = array('Flickr Username', 'FlickrId', 'Tag Filter');
  $flickr_accounts = flickrrippr_user_get_accounts($user->uid);
  foreach($flickr_accounts as $account) {
    $rows[] = array(
      check_plain($account->flickrusername),
      check_plain($account->flickrid),
      check_plain($account->tag),
//       print_r($account, 1)
      l('Delete', 'user/flickrrippr/delete/'. $account->flickrid),
    );
  }
  $output .= theme('table', $headers, $rows);
  return $output;
}

function flickrrippr_account_settings_form($f, $flickrid) {

//   $settings = flickrrippr_user_settings_get($user->uid);
  $account = flickrrippr_account_get($flickrid);
  $form = array();
  drupal_set_title(t('Flickr Rippr settings for %username', array('%username' => $user->name)));
  $form['flickrid'] = array('#type' => 'hidden', '#value' => $flickrid);
  $form['flickr_username'] = array(
                                    '#type' => 'textfield',
                                    '#title' => t('Flickr Username'),
                                    '#default_value' => isset($account->flickrusername) ? $account->flickrusername : '',
                                    '#required' => TRUE
                                  );
  $form['flickr_tag'] = array(
                                    '#type' => 'textfield',
                                    '#title' => t('Filter by Tag'),
                                    '#description' => t('If entered, only photos that have this tag will be imported. Be aware that your friends and family on flickr may also be allowed to tag your photos.'),
                                    '#default_value' => isset($account->tag) ? $account->tag : '',
                                  );


  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );
  return $form;
}

function flickrrippr_account_get($flickrid) {
  $account = db_fetch_object(db_query("SELECT * FROM {flickrusers} WHERE flickrid='%s'", $flickrid));
  return $account;
}

/**
 * Get a user's flickr settings from our database
 */
function flickrrippr_user_settings_get($uid) {
  drupal_set_message(__FUNCTION__ . ' is deprecated', 'error');
}

function flickrrippr_user_get_accounts($uid) {
  $result = db_query("SELECT * FROM {flickrusers} WHERE uid = %d", $uid);
  $all_user_accounts = array();
  while($fuser = db_fetch_object($result)) {
    $all_user_accounts[] = $fuser;
  }
  return $all_user_accounts;
}


function flickrrippr_account_settings_form_validate($form, &$form_state) {
  //TODO, check the submitted username exists on flickr?
  //query api
  //and store the 3432@N00 uid then
}
function flickrrippr_account_settings_form_submit($form, &$form_state) {
  $flickrid = $form_state['values']['flickrid'];
  $account = flickrrippr_account_get($flickrid);
  
  if(!user_access('Administer global flickr api settings')) {
    GLOBAL $user;
    if($account->uid != $user->uid) {
      drupal_set_message(t('Unable to edit other users', 'error'));
      return;
    }
  }
  
//   $settings = flickrrippr_user_settings_get($user->uid);

//flickrrippr_flickruser(
//   if (isset($account->flickrusername)) {
//     $result = db_query("UPDATE {flickrusers} SET flickrusername='%s', flickrid='%s', tag='%s' WHERE flickrid = '%d'",
//       $form_state['values']['flickr_username'],
//       $flickrid,
//       $form_state['values']['flickr_tag'],
//       $flickrid);
//       drupal_set_message(sprintf("UPDATE {flickrusers} SET flickrusername='%s', tag='%s' WHERE flickrid = '%d'",
//       $form_state['values']['flickr_username'],
//       $form_state['values']['flickr_tag'],
//       $flickrid));
//     drupal_set_message(t("Flickr username updated"));
//   }
//   else {
    $result = db_query("INSERT INTO {flickrusers} (flickrusername, tag, uid) VALUES ('%s', '%s', %d)",
      $form_state['values']['flickr_username'],
      $form_state['values']['flickr_tag'],
      $flickrid);
    drupal_set_message(sprintf("INSERT INTO {flickrusers} (flickrusername, tag, uid) VALUES ('%s', '%s', %d)",
      $form_state['values']['flickr_username'],
      $form_state['values']['flickr_tag'],
      $flickrid));
    drupal_set_message(t("Flickr username set"));
//   }
}

/**
 * Used when attempting to edit a flickrphoto node.
 */
function flickrrippr_form(&$node) {
  $form = array();
  //TODO add instructions on edit the photo on flickr.com

//   $form['flickr'] = array('#type' => 'fieldset',
//                               '#collapsible' => TRUE,
//                           '#title' => t('Flickr API queries'),
//                          );
//   $form['flickr']['cache'] = array(
//                                    '#type' => 'checkbox',
//                                    '#title' => t('Cache jpeg locally'),
//                                   );
/*
  $form['flickr']['refresh'] = array(
                                     '#type' => 'checkbox',
                                     '#title' => t('Refresh details from flickr.com'),
                                    );
  $form['flickr']['jpeg_refresh'] = array(
                                          '#type' => 'checkbox',
                                          '#title' => t('Refresh cached jpeg'),
                                         );
  $form['flickr']['link'] = array(
                                  '#type' => 'checkbox',
                                  '#title' => t('Show link to flickr photo page'),
                                 );*/

//   $form['size'] = array('#type' => 'fieldset',
//                         '#collapsible' => TRUE,
//                         '#title' => t('Image sizes'),
//                        );
//   $sizes = array('t' => t('Thumbnail'),
//                  's' => t('Square'),
//                           'm' => t('Medium'),
//                                    '' => t('Default')
//                 );
//   $form['size']['teaser_size'] = array(
//                                        '#type' => 'select',
//                                        '#options' => $sizes,
//                                        '#title' => t('Teaser Size'),
//                                            '#description' => t('Size of jpeg shown in node teaser'),
//                                       );
//   $form['size']['page_size'] = array(
//                                      '#type' => 'select',
//                                      '#options' => $sizes,
//                                      '#title' => t('Page Size'),
//                                          '#description' => t('Size of jpeg shown in node page and rss feed'),
//                                     );
//   $form['nid'] = array(
//                        '#type' => 'hidden',
//                        '#value' => $node->nid,
//                       );

  return $form;
}

function flickrrippr_node_info() {
  return array(
    'flickrrippr_photo' => array(
      'name' => t('Flickr Rippr Photo'),
      'module' => 'flickrrippr',
      'description' => t("Photos imported from a user's flickr stream"),
      'has_body' => FALSE,
      )
    );

}

function flickrrippr_view(&$node, $teaser = FALSE, $page = FALSE) {
  
  $photo = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE nid=%d LIMIT 1", $node->nid));

  if (!$photo) {
    drupal_set_message(t("Failed to find flickr photo info for !link", array('!link' => l($node->title, 'node/'. $node->nid))), 'error');
    return $node;
  }

  if ($page) {
    $image = '<img src="'. htmlentities($photo->photo_path) .'" />';
    $image = '<a href="' . htmlentities($photo->page_url) .'">'. $image .'</a>';
  }
  else {
    $image = '<img src="'. htmlentities($photo->thumbnail_path) .'" />';
    $image = '<a href="'. url('node/'. $node->nid) .'">'. $image .'</a>';
  }

  $node->content['flickr_photo'] = array(
    '#weight' => 0,
   '#value' => '<div class="flickrrippr_photo">'. $image .'</div>',
  );

  $node->content['flickr_description'] = array(
    '#value' => '<div class="flickrriprr_description">'. htmlentities(html_entity_decode($photo->description))  .'</div>', //decode then encode
    '#weight' => 5
  );
  
  $node->content['body'] = array();
  
  return $node;
}


function flickrrippr_node_form(&$form_state, $node) {
}

/**
 * 
 */
function flickrrippr_nodeapi(&$node, $op, $teaser, $page) {
  if (!preg_match('!^flickrrippr_!', $node->type)) {
    return;
  }
  
  switch ($op) {
    case 'delete':
      //delete where there is no node.. THIS WON'T SCALE
      //how to get around drupal's lack of referential integrity?
      db_query('DELETE FROM {flickrphotos} WHERE nid NOT IN (SELECT nid FROM {node});');
      drupal_set_message("Flickr photo deleted");
    break;
    case 'view':
      flickrrippr_view($node, $teaser, $page);
    break;
  }
}

