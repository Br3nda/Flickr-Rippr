<?php
// $Id: flickrrippr.module,v 1.87.2.5 2010/06/21 22:31:16 taniwha Exp $


include_once(drupal_get_path('module', 'flickrrippr') .'/flickrrippr.inc');

/**
 * Implementation of hook_perm().
 */
function flickrrippr_perm() {
  return array('Configure own blogged flickr stream', 'Administer global flickr api settings', 'Cache own Flickr Photos on this server');
}

/**
 * Implementation of hook_menu().
 */
function flickrrippr_menu() {
  GLOBAL $user;
  $items = array();
//   $items['admin/settings/flickrrippr'] = array(
//                       'title' => 'Flickr Rippr Settings',
//                       'path' => 'admin/settings/flickrrippr',
//                       'access arguments' => array('Administer global flickr api settings'),
//                       'type' => MENU_NORMAL_ITEM,
//                       'page callback' => 'drupal_get_form',
//                       'page arguments' => array('flickrrippr_admin_form')
//                     );
    $items['admin/content/flickrrippr'] = array(
                      'title' => t('Flickr Rippr'),
		      'description' => t('View users, and force re-read from flickr.com'),
                      'type' => MENU_NORMAL_ITEM,
                      'page callback' => 'flickrrippr_admin',
                      'access arguments' => array('Administer global flickr api settings'),
                    );

    $items['admin/content/flickrrippr/fetch'] = array(
                      'title' => t('Fetch'),
                      'type' => MENU_CALLBACK,
                      'page callback' => 'flickrrippr_admin_fetch',
                      'access arguments' => array('Administer global flickr api settings'),
                    );

  //configure a user's account with their flickr username
  $items['user/flickrippr'] = array(
                      'title' => 'My Flickr Photo settings',
                      'type' => MENU_NORMAL_ITEM,
                      'page callback' => 'flickrrippr_user_settings',
                      'access arguments' => array('Configure own blogged flickr stream'),
                    );
  /*
  	//The refresh tab
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      //TODO - there has gotta be a better way to work out this is a flickrrippr node
      $node = node_load(array('nid' => arg(1)));
      if ($node->type == 'flickrippr') {
        $items['node/'. arg(1) .'/flickr-refresh'] = array(
          'title' => t('Refresh'),
          'callback' => 'flickrrippr_node_refresh',
          'access' => user_access('Administer global flickr api settings'),
          'callback arguments' => arg(1),
          'access' => user_access('Configure own blogged flickr stream'),
          'type' => MENU_IS_LOCAL_TASK);
      }
    }


    //create a page for thumbnails, of every user that has settings saved
    //TODO this really really doesn't scale
    $result = db_query("SELECT u.name, u.uid, flickrusername from {flickrusers} f INNER JOIN {users} u ON f.uid = u.uid ORDER BY u.name");
    while ($r = db_fetch_object($result)) {
      $items['flickrrippr/thumbs/'. $r->uid] = array(
                      'title' => t('!name\'s Photos', array('!name' => $r->name)),
                      'callback arguments' => array($r->flickrusername, $r->uid),
                      'type' => MENU_NORMAL_ITEM,
                      'callback' => 'flickrphoto_thumbnails',
                      'access' => TRUE,
                    );
    }
  */
  return $items;
}

function flickrrippr_admin_fetch($uid) {
  return '';
}

/**
 * This is called from admin menu, and will refresh the 20 oldest photos
 * TODO check this work in drupal6
 */
function flickrrippr_admin() {
  $output = '';

  $result = pager_query("SELECT * FROM {flickrusers} f INNER JOIN {users} u ON u.uid = f.uid");
  $headers = array(
    array('data' => t('Name'), 'field' => 'name'),
    array('data' => t('Flickr Username'), 'field' => 'flickrusername'),
  );


  while ($u = db_fetch_object($result)) {
    $rows[] = array(
      $u->name,
      $u->flickrusername,
      l('Fetch latest', 'admin/content/flickrrippr/fetch/'. $u->uid),
    );
  }
  $output .= theme('table', $headers, $rows);
  return $output;

}


//function flickrrippr_node_refresh($nid) {
//  $photo_id = flickrrippr_get_photo_id($nid);
//  if (!$photo_id) {
//	return t('Photo not found');
//  }
//  flickrrippr_makenode($photo_id);
//  drupal_goto('node/' . $nid);
//}




/**
 * Called by cron, this check for new photos for each user
 * This function will recurse, reading futher back into the flickr stream
 * until it finds a photo it already has saved as a node
 */
function flickrrippr_check_latest($user_id, $pagenum = 1) {

  $output = '';
  //TODO, don't run every time.
  $num_photos = 10; //TODO make customisable

  //This function will recurse, reading futher back into the flickr stream until it finds a photo it already has saved as a node
 //maximum of 5 fetches.
  if ($pagenum > 5) {
    return 'done';
  }
  
  
 //fetches defails from our database
  $flickr_settings = flickrrippr_user_settings_get($user_id);
  
 //fetches from api.flickr.com
  if (!$flickr_settings->flickrid) {
    $flickrsettings->flickrid = flickrrippr_flickruser($flickr_settings->flickrusername);
  }

  
 //search flickr for latest photos from that user.
  $flickr = flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"));
    return $output;
  }
  
  $query = array(
    'user_id' => $flickr_settings->flickrid,
    'per_page' => $num_photos,
    'page' =>  $pagenum
    );

  $photos = $flickr->photos_search($query);
  //drupal_set_message(__FUNCTION__ .' photos: '. print_r($photos, 1));

  $new = TRUE;
  if (is_array($photos['photo'])) {
    foreach ($photos['photo'] as $p) {
      $new = (flickrrippr_makenode($p['id']) && $new);
    }
  }
  else {
    drupal_set_message(t('No new photos'));
  }
  //if we found a photo that wasn't new, then don't recurse
  if (!$new) {
    drupal_set_message(t('No new photos'));
    return FALSE;
  }
  //recursive - call this function again to get the next 10;
  //flickrrippr_check_latest($user_id, $pagenum +1);

}


/**
 * get the node id for a flickr photo id
 */
function flickrrippr_photo_get_nid($photo_id) {
  $rec = db_fetch_object(db_query("SELECT * FROM {flickrphotos} WHERE flickrphoto_id = '%s'", $photo_id));
  $nid = $rec->nid;
  return $nid;
}

///**
//* Makes a node for a flickr photo - or updates if it already exists
//*/
function flickrrippr_makenode($photo_id) {
  drupal_set_message(t("Making node for flickr photoid=%photo_id", array('%photo_id' => $photo_id)));
  if (!$photo_id) {
    drupal_set_message(t("Photo_id required"), 'error');
    return;
  }

  $node->nid = flickrrippr_photo_get_nid($photo_id) ;
  if ($node->nid) {
    //already exists
    drupal_set_message(t('Existing node id = !nid. !link.'), array('!nid' => $node->nid, '!link' => l('View node', 'node/'. $node->nid)));
  }
  $flickr = flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com, library missing"));
    return $output;
  }

  //Info to put into the node
  $flickr_info = $flickr->photos_getInfo($photo_id);
  $flickr_context = $flickr->photos_getContext($photo_id);

  //drupal_set_message(__FUNCTION__ .'photo info: '. print_r($flickr_info, 1));
  //flickr username
  $flickrusername = $flickr_info['owner']['username'];
  drupal_set_message(t("Making a node for photo by %flickrusername", array('%flickrusername' => $flickrusername)));

  //get user details
  $user = flickrrippr_get_user_by_flickrusername($flickrusername);
  if (!$user) {
    drupal_set_message(t("User doesn't exist, unable to save photo %photo_id", array('%photo_id' => $photo_id)));
    return FALSE;
  }

  //Full (normal) sized image
  $path =  flickrrippr_path($flickr_info);
  if (!$path) {
    return;
  }
  list($width, $height, $type, $attr) = getimagesize($path);
  $img = '<img src="' . $path  . '" alt="' . t($info['title']) . '" width="' . $width . '" height="' . $height . '" />';


  //thumbnail version
  $path =  flickrrippr_path($flickr_info, TRUE, 'm');

  list($width, $height, $type, $attr) = getimagesize($path);
  $thumb = '<img src="' . $path . '" width="' . $width . '" height="' . $height . '" />';


  $node->title = htmlentities($flickr_info['title']);

  $node->created = strtotime($flickr_info['dates']['taken']);

  $node->teaser = '<p>'  . $thumb . '</p>';

  $node->teaser .= '<p>' . htmlentities(html_entity_decode($flickr_info['description'])) . '</p>';
  $node->format = 3;

  $content = '';
  if ($flickr_info['description']) {
  $content .= '<p>' . htmlentities(html_entity_decode($flickr_info['description'])) . '</p>';
  }
  $content .= $img;

  //$content .= '<p>' . t('photo by %name', array('%name' => $realname)) ."</p>\n";
  //$content .= '<!--break-->';

  $content .= '<p>' . t('This is a ' . l(t('Flickr Photo') , 'http://flickr.com/photos/' . $flickr_info['owner']['nsid'] . '/' . $photo_id .'/') . ' imported via the flickr api') . '</p>';

  $node->body = $content;

  $node->name = $user->name;
  $node->uid = $user->uid;
  $node->type = 'flickrrippr';
  $node->published = 1;
  $node->status =1;
  $node->comment = 2;
  $node->promote = 1;
  $node->format = 2;

  node_save($node);

  if ($node->is_new) {
    $result = db_query("INSERT INTO {flickrphotos} (flickrphoto_id, nid, lastfetched) VALUES ('%s', %d, %d)", $photo_id, $node->nid, strtotime('now'));
    drupal_set_message(t("New photo found, %photo_id", array('%photo_id' =>  $photo_id)));
  }
  else {
    $result = db_query("UPDATE {flickrphotos} SET lastfetched=%d WHERE flickrphoto_id=%d AND nid=%d", strtotime('now'), $photo_id, $node->nid);
    drupal_set_message(t("Updated photo %photo_id, ". l($node->title, 'node/' . $node->nid), array('%photo_id' => $photo_id)));
  }
}



//
//function flickrrippr_addcomments($photo_id, $nid) {
//  $flickr = @flickrapi_phpFlickr();
//    if (!$flickr) {
//    drupal_set_message(t("Unable to query flickr.com, library missing"));
//    return $output;
//  }
//  $comments = $flickr->photos_comments_getList($photo_id);
//  if (!is_array($comments['comment'])) return;
//  foreach($comments['comment'] as $c) {
//   $result = db_query("SELECT cid from {flickrcomments} where flickrcomment_id = '%s'", $c['id']);
//   if (!db_num_rows($result)) {
//    $comment = array(
//         'nid' => $nid,
//	'status' => 1,
//	'timestamp' => $c['datecreate'],
//	'comment' => $c['_content'],
//	'name' => $c['authorname'],
//	'homepage' => 'http://flickr.com/photos/'. $c['author']);
//     	$cid = comment_save($comment);
//	if (!$cid) {
//		drupal_set_message('comment save failed', 'error');
//		return;
//	}
//
//
//      db_query("INSERT INTO {flickrcomments} (cid, flickrcomment_id, author, authorname, datecreate, permalink, content)
// VALUES (%d, '%s', '%s', '%s', %d, '%s', '%s')", $cid, $c['id'], $c['author'], $c['authorname'], $c['datecreate'], $c['permalink'], $c['_content']);
// 	 db_query("UPDATE {comments} set status =1, timestamp=%d where cid = %d", $c['datecreate'], $cid);
//    	 db_query("UPDATE {ua_logger} SET ua='<a href=\"http://flickr.com/photos/taniwha/\">Flickr</a>' where xid=%d and type='comment'", $cid);
//    }
//   }
//
// }

/**
 * Helper function, returns the flickr_id for a flickr username.
 */
function flickrrippr_flickruser($username) {
  $flickr = @flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com"), 'error');
    return $output;
  }
  $fuser = $flickr->people_findByUsername($username);

  if (!$fuser['id']) {
    drupal_set_message(t('!username is not known by flickr.com', array('!username' => $username)), 'error');
    return;
  }
  db_query("UPDATE {flickrusers} SET flickrid='%s' WHERE flickrusername='%s'", $fuser['id'], $username);
  return $fuser['id'];
}

/**
 * Implementation of hook_cron().
 */
function flickrrippr_cron() {
  $result = db_query("SELECT * FROM {flickrusers} ORDER BY uid");

  while ($fuser = db_fetch_object($result)) {
    flickrrippr_check_latest($fuser->uid);
  }
}


/**
 * administer global settings
 */
function flickrrippr_admin_form() {
  $form = array();
  $form['instructions'] = array('#type' => 'markup', '#value' => 'Get your own API key from '. l('http://www.flickr.com/services/api/', 'http://www.flickr.com/services/api/'));

  $form['api_key'] = array(
        '#title' => 'Flickr Api Key',
        '#required' => TRUE,
        '#type' => 'textfield',
        '#default_value' => variable_get('flickrapikey', '')
      );
//   $form['jpegcache'] = array(
//       '#title' => 'Allow Local Cache',
//       '#type' => 'checkbox',
//       '#default_value' => variable_get('flickrjpegcache', TRUE),
//       '#description' => t('Allow users to cache flickr photo jpeg files locally'),
//       );

  $form['save'] = array(
     '#type' => 'submit',
     '#value' => t('Save'),
      );
  return $form;
}

/**
 * Validates the admin form
 */
function flickrrippr_admin_form_validate() {
}

/**
 * This runs after admin form is submitted, and saves our module's settings
 */
function flickrrippr_admin_form_submit($form, &$form_state) {
  $form_values = &$form_state['values'];
  variable_set('flickrapikey', $form_state['values']['api_key']);
  variable_set('flickrjpegcache', $form_state['values']['jpegcache']);
  drupal_set_message(t('Settings saved'));
}


/**
 * Where a user defines their username
 */
function flickrrippr_user_settings($uid = NULL) {
  if (!empty($uid) && user_access('Administer global flickr api settings')) {
    $user = user_load(array('uid' => $uid));
  }
  else {
    GLOBAL $user;
  }
  return drupal_get_form('flickrrippr_user_settings_form', $user);
}

function flickrrippr_user_settings_form($a, $user) {
  $settings = flickrrippr_user_settings_get($user->uid);
  $form = array();
  $form['flickr_username'] = array(
                                    '#type' => 'textfield',
                                    '#title' => t('Flickr Username'),
                                    '#default_value' => isset($settings->flickrusername) ? $settings->flickrusername : '',
                                    '#required' => TRUE
                                  );
  $form['thumbnailpage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Thumbnail page'),
    '#default_value' => TRUE,
    );
//   $form['promote'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Promote new photos to front page?'),
//   );
  if (user_access('Cache own Flickr Photos on this server')) {
    $form['cache'] = array(
                           '#title' => t('Cache photos on this server?'),
                                         '#type' => 'checkbox'
                          );
  }


  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );
  return $form;
}

/**
 * Get a user's flickr settings from our database
 */
function flickrrippr_user_settings_get($uid) {
  return db_fetch_object(db_query("SELECT * FROM {flickrusers} WHERE uid = %d", $uid));
}


function flickrrippr_user_settings_form_validate($form, &$form_state) {
  //TODO, check the submitted username exists on flickr?
  //query api
  //and store the 3432@N00 uid then
}
function flickrrippr_user_settings_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['uid'])) {
    $user = user_load(array('uid' => intval($form_state['values']['uid'])));
  }
  else {
    GLOBAL $user;
  }
  $settings = flickrrippr_user_settings_get($user->uid);

  if ($settings->flickrusername) {
    $result = db_query("UPDATE {flickrusers} SET flickrusername='%s' WHERE uid = %d", $form_state['values']['flickr_username'], $user->uid);
    drupal_set_message(t("Flickr username updated"));
  }
  else {
    $result = db_query("INSERT INTO {flickrusers} (flickrusername, uid) VALUES ('%s', '%s')", $form_state['values']['flickr_username'], $user->uid);
    drupal_set_message(t("Flickr username set"));
  }
}

/**
 * Used when attempting to edit a flickrphoto node.
 */
function flickrrippr_form(&$node) {
  $form = array();
  //TODO add instructions on edit the photo on flickr.com

  $form['flickr'] = array('#type' => 'fieldset',
                              '#collapsible' => TRUE,
                          '#title' => t('Flickr API queries'),
                         );
  $form['flickr']['cache'] = array(
                                   '#type' => 'checkbox',
                                   '#title' => t('Cache jpeg locally'),
                                  );

  $form['flickr']['refresh'] = array(
                                     '#type' => 'checkbox',
                                     '#title' => t('Refresh details from flickr.com'),
                                    );
  $form['flickr']['jpeg_refresh'] = array(
                                          '#type' => 'checkbox',
                                          '#title' => t('Refresh cached jpeg'),
                                         );
  $form['flickr']['link'] = array(
                                  '#type' => 'checkbox',
                                  '#title' => t('Show link to flickr photo page'),
                                 );

  $form['size'] = array('#type' => 'fieldset',
                        '#collapsible' => TRUE,
                        '#title' => t('Image sizes'),
                       );
  $sizes = array('t' => t('Thumbnail'),
                 's' => t('Square'),
                          'm' => t('Medium'),
                                   '' => t('Default')
                );
  $form['size']['teaser_size'] = array(
                                       '#type' => 'select',
                                       '#options' => $sizes,
                                       '#title' => t('Teaser Size'),
                                           '#description' => t('Size of jpeg shown in node teaser'),
                                      );
  $form['size']['page_size'] = array(
                                     '#type' => 'select',
                                     '#options' => $sizes,
                                     '#title' => t('Page Size'),
                                         '#description' => t('Size of jpeg shown in node page and rss feed'),
                                    );
  $form['nid'] = array(
                       '#type' => 'hidden',
                       '#value' => $node->nid,
                      );

  return $form;
}
///*
//    function flickrphoto_node_form_alter($form_id, &$form) {
//  //$form = array();
//
//  $form['content'] = array(
//  '#type' => 'markup',
//  '#value' => $node->body
//                          );
//
//  $form['refresh'] = array(
//  '#type' => 'submit',
//  '#value' => t('Refresh data from flickr.com'),
//                          );
//
//  $form['nid'] = array(
//  '#type' => 'hidden',
//  '#value' => $node->nid,
//                      );
//
//  return $form;
//}
// */
//
///**
//  * After pressing the refresh button, a node is updated from flickr.com
// */
//function flickrrippr_node_form_submit($form_id, $form_values) {
//
//  if ($form_values['refresh']) {
//    $photo =  db_fetch_object(db_query("SELECT flickrphoto_id FROM {flickrphotos} WHERE nid = %d", $form_values['nid']));
//    assert($photo);
//    flickrrippr_makenode($photo->flickrphoto_id);
//  }
//  drupal_goto('node/'. $form_values['nid']);
//}
//
///**
//    * Implementation of hook_block
//*/
//    function flickrrippr_block($op = 'list', $delta = 0, $edit = array()) {
//      $result = db_query("SELECT * FROM {flickrusers} INNER JOIN {users} ON {flickrusers}.uid = {users}.uid ORDER BY name");
//      $users = array();
//      while ($user = db_fetch_object($result)) {
//        $users[] = $user;
//      }
//
//      if ($op == 'list') {
//        foreach ($users as $user) {
//          $blocks[] = array('info' => t("!username's Newest Flickr Photos", array('!username' => $user->name)),
//                            'weight' => 0,
//                            'enabled' => 0,
//                            'region' => 'left');
//
//        }
//        return $blocks;
//      }
//      elseif ($op == 'configure' && $delta == 0) {
//    /*
//        $form['items'] = array(
//        '#type' => 'select',
//        '#title' => t('Number of items'),
//        '#default_value' => variable_get('mymodule_block_items', 0),
//        '#options' => array('1', '2', '3'),
//                          );
//    return $form;
//     */
//      }
//      elseif ($op == 'save' && $delta == 0) {
//    //variable_set('mymodule_block_items', $edit['items']);
//      }
//      elseif ($op == 'view') {
//        $user = $users[$delta];
//        $block = array(
//                       'subject' => $user->name,
//                       'content' => flickrphoto_newest($user)
//                      );
//        return $block;
//    /*
//        switch($delta) {
//        case 0:
//        $block = array('subject' => t('Title of block #1'),
//        'content' => mymodule_display_block_1());
//    break;
//        case 1:
//        $block = array('subject' => t('Title of block #2'),
//        'content' => mymodule_display_block_2());
//    break;
//      }
//    return $block;
//     */
//      }
//    }
//
///**
//    Displays flickr photos, and links to nodes if caches
//*/
//    function flickrphoto_thumbnails($uid=NULL) {
//      if($user_id) {
//        $result = db_query("SELECT u.name, u.uid, flickrusername from {flickrusers} f INNER JOIN {users} u ON f.uid = u.uid WHERE uid = %d ORDER BY u.name", $uid);
//
//      }
//      else {
//        $result = db_query("SELECT u.name, u.uid, flickrusername from {flickrusers} f INNER JOIN {users} u ON f.uid = u.uid ORDER BY u.name");
//      }
//      $LIMIT = 200;
//      $flickr = @flickrapi_phpFlickr();
//      while ($user = db_fetch_object($result)) {
//        $user->flickrid = flickrrippr_flickruser($user->flickrusername);
//        $photos = $flickr->people_getPublicPhotos($user->flickrid, NULL, $LIMIT, 1);
//        $output .= flickrrippr_thumbnail_table($photos, $photo_list);
//      }
//      return $output;
//    }
//
///**
//    * Returns html formated chunk
//    * of a user's newest photo
//    *
//    * user is the drupal user (object)
//    * as returned by user_load
//    * or GLOBAL $user
//*/
//    function flickrphoto_newest($user) {
//      $output = '';
//
//      $flickr = @flickrapi_phpFlickr();
//      if (!$flickr) {
//        drupal_set_message(t("Unable to query flickr.com, library missing"));
//        return $output;
//      }
//
//      if (!$user->flickrid) {
//        $user->flickrid = flickrrippr_flickruser($user->flickrusername);
//      }
//      if (!$user->flickrid) {
//        return $output;
//      }
//      $photos = $flickr->people_getPublicPhotos($user->flickrid, NULL, 18, 1);
//      $output .= flickrrippr_thumbnail_table($photos, $photo_list);
//
//  //$output .= l('more photos', 'flickr_newest');
//  //TODO, make a page where more photos can be seen
//      return $output;
//    }
//
//}
///**
//* Make a html chunk of photos ready for display from a
//* photo list as returned by phpFlickr methods
//*/
//function flickrrippr_thumbnail_table($photos, &$photo_list, $cache = TRUE) {
//  $row = 0;
//  if (!is_array($photos['photo'])) {
//    return t('No photos found');
//  }
//
//  foreach ($photos['photo'] as $p) {
//    unset($nid);
//    $photo_id = $p['id'];
//    if ($cache) {
//      $nid = flickrrippr_photo_get_nid($photo_id);
//      if (!$nid) {
//        flickrrippr_makenode($photo_id);
//        $nid = flickrrippr_photo_get_nid($photo_id);
//      }
//    }
//    if (!$nid) {
//      drupal_set_message(t('Unable to get new node nid for photos %photo_id', array('%photo_id' => $photo_id)), 'error');
//      return '';
//    }
//
//    $img = flickrrippr_show_photo($p, FALSE, NULL, $cache);
//    if ($cache) {
//      $url = url('node/' . $nid);
//    }
//    else {
//      $url = 'http://flickr.com/photos/'.$p['owner'] .'/'. $p['id'] ;
//    }
//    $s .= '<a href="' . $url .'">';
//    $s .= $img;
//    $s .= '</a>';
//    $photo_list[] = $p['id'];
//    $row++;
//  }
//  return $s;
//}
//
//
/**
//    menu callback, page-able screen full of thumbnails
//*/
//    function flickrrippr_thumbnails($fuser, $page = 1) {
//      $output = '';
//      if (!$fuser) {
//        return $output;
//      }
//
//      $flickr = @flickrapi_phpFlickr();
//
//      if (!$flickr) {
//        drupal_set_message(t("Unable to query flickr.com, library missing"));
//        return $output;
//      }
//
//      $num_per_page = 60;
//
//      $user = flickrrippr_flickruser($fuser);
//      $photos= $flickr->people_getPublicPhotos($user['id'], NULL, $num_per_page, intval($page));
//
//      $output .= flickrrippr_thumbnail_table($photos, $photo_list);
//
//      $output .= l(t('More'), 'flickrthumbnails/' . $fuser. '/' . ($page + 1));
//
//      return $output;
//    }
//
//    function flickrrippr_node_info() {
//      return array(
//                   'flickrrippr' => array(
//                                          'name' => t('Flickr Rippr Photo'),
//          'module' => 'flickrrippr',
//          'description' => t('Photos imported from a user\'s flickr stream'),
//                                         )
//                  );
//
//
//    }
//
//
//function flickrrippr_get_photo_id($nid) {
//  $record = db_fetch_object(db_query("SELECT flickrphoto_id from {flickrphotos} where nid=%d", $nid));
//  return $record->flickrphoto_id;
//}
//
//function flickrrippr_get_photo_id($nid) {
//        $record = db_fetch_object(db_query("SELECT flickrphoto_id from {flickrphotos} where nid=%d", $nid));
//	if (!$record) return 0;
//        return $record->flickrphoto_id;
//}
function flickrrippr_node_form(&$form_state, $node) {
}
/**
 */
function flickrrippr_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete':
      //delete where there is no node.. THIS WON'T SCALE
      //how to get around drupal's lack of referential integrity?
      db_query('DELETE FROM {flickrphotos} WHERE nid NOT IN (SELECT nid FROM {node});');
      drupal_set_message("Flickr photo deleted");
    break;
//     case 'view':
//       flickrrippr_node_view($node);
  }
}

