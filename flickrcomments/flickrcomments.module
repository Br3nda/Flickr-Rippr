<?php
/**
 * @file Flickr Comments module
 * Imports comments from flickr for flickr rippr photonodes
 */

/**
 * Implementation of hook_comment
 */
function flickrcomments_comment(&$a1, $op) {
}


/**
 * Implementation of hook_nodeapi().
 */
function flickrcomments_nodeapi(&$node, $op) {
  if ($node->type != 'flickrrippr_photo') {
    return;
  }
  switch($op) {
    case 'view':
    case 'update':
    case 'insert':
    break;
    case 'delete':
      db_query('DELETE FROM {flickrcomments} WHERE nid = %d', $node->nid);
    break;
  }
}
/** 
 * Implementation of hook_menu().
 */
function flickrcomments_menu() {
  $items['admin/flickr/comment'] = array(
    'title' => 'Flickr Comments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickrcomments_admin_form'),
    'access arguments' => array('Administer Flickr Rippr'),
  );
  return $items;
}

function flickrcomments_admin_form() {
  $form = array();
  
  $formats = filter_formats();
  foreach($formats as $f) {
    $options[$f->format] = $f->name;
  }
  $form['flickrcomments_input_format'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Input format for comments'),
    '#required' => TRUE,
    '#default_value' => variable_get('flickrcomments_input_format', 0)
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_flickrrippr_node_alter
 */
function flickrcomments_flickrrippr_node_alter($node, $details) {
  if ($details['comments'] == 0) {
    //no comments
    return;
  }

  $photo_id = $details['photo_id'];
  drupal_set_message("Going to get comments for $photo_id");

  $flickr = @flickrapi_phpFlickr();
  if (!$flickr) {
    drupal_set_message(t("Unable to query flickr.com, something is wrong with the flickrapi module."), 'error');
    return FALSE;
  }
  $comments = $flickr->photos_comments_getList($photo_id);
//       drupal_set_message('all = '. nl2br(print_r($comments['comment'], 1)));

  //no comments? get out of here
  if (!isset($comments['comment']) or !is_array($comments['comment'])) {
    return;
  }
  foreach($comments['comment'] as $c) {
//     drupal_set_message('comment  = '. print_r($c, 1));
    $existing_comment = _flickrcomments_get_comment($c['id']);
    $comment = array(
      'subject' => t('Flickr comment'),
      'homepage' => $c['permalink'],
      'name' => $c['authorname'],
      'cid' => FALSE, //needed to be set, so core doesn't E_STRICT splatter
      'pid' => 0,
      'nid' => $node->nid,
      'uid' => 0,
      'comment' => html_entity_decode(html_entity_decode($c['_content'])),
      'format' => variable_get('flickrcomments_input_format', 0),
      'timestamp' => $c['datecreate'],
    );
    if ($existing_comment) {
      $comment['cid'] = $existing_comment->cid;
    }
    $cid = comment_save($comment);
    $flickrcomment->flickrcommentid = $c['id'];
    $flickrcomment->authorname = $c['authorname'];
    $flickrcomment->permalink = $c['permalink'];
    $flickrcomment->cid = $cid;
    if ($existing_comment) {
      drupal_write_record('flickrcomments', $flickrcomment, array('flickrcommentid', 'cid'));
    }
    else {
      drupal_write_record('flickrcomments', $flickrcomment);
    }

  }
}

function _flickrcomments_get_comment($comment_id) {
  return db_fetch_object(db_query("SELECT * FROM {flickrcomments} where flickrcommentid='%s'", $comment_id));
}

